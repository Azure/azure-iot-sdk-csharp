// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.IoT.DigitalTwin.Model.Service.Generated
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DigitalTwinRepositoryService.
    /// </summary>
    public static partial class DigitalTwinRepositoryServiceExtensions
    {
            /// <summary>
            /// Gets a DigitalTwin model object for the given digital twin model id.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// Digital twin model id Ex:
            /// &lt;example&gt;urn:contoso:com:temparaturesensor:1&lt;/example&gt;
            /// </param>
            /// <param name='apiVersion'>
            /// Api version string.
            /// </param>
            /// <param name='repositoryId'>
            /// Private repository id. To access global repository, caller should not
            /// specify this value.
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Optional. Provides a client-generated opaque value that is recorded in the
            /// logs. Using this header is highly recommended for correlating client-side
            /// activities with requests received by the server.
            /// </param>
            /// <param name='expand'>
            /// Indicates whether to expand the capability model's interface definitions
            /// inline or not. This query parameter ONLY applies to Capability model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetModelAsync(this IDigitalTwinRepositoryService operations, string modelId, string apiVersion, string repositoryId = default(string), string xMsClientRequestId = default(string), bool? expand = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetModelWithHttpMessagesAsync(modelId, apiVersion, repositoryId, xMsClientRequestId, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Creates or updates a DigitalTwin Model in a repository.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// Digital twin model id Ex:
            /// &lt;example&gt;urn:contoso:TemparatureSensor:1&lt;/example&gt;
            /// </param>
            /// <param name='apiVersion'>
            /// Api version string.
            /// </param>
            /// <param name='content'>
            /// Model definition in Digital Twin Definition Language format.
            /// </param>
            /// <param name='repositoryId'>
            /// Private repository id. To access global repository, caller should not
            /// specify this value.
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Optional. Provides a client-generated opaque value that is recorded in the
            /// logs. Using this header is highly recommended for correlating client-side
            /// activities with requests received by the server.
            /// </param>
            /// <param name='ifMatch'>
            /// Used to make operation conditional for optimistic concurrency. That is, the
            /// document is updated only if the specified etag matches the current version
            /// in the database. The value should be set to the etag value of the resource.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CreateOrUpdateModelHeaders> CreateOrUpdateModelAsync(this IDigitalTwinRepositoryService operations, string modelId, string apiVersion, string content, string repositoryId = default(string), string xMsClientRequestId = default(string), string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateOrUpdateModelWithHttpMessagesAsync(modelId, apiVersion, content, repositoryId, xMsClientRequestId, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Deletes a Digital twin model from the repository.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// Model id Ex:
            /// &lt;example&gt;urn:contoso:com:temparaturesensor:1&lt;/example&gt;
            /// </param>
            /// <param name='repositoryId'>
            /// Private repository id. To access global repository, caller should not
            /// specify this value.
            /// </param>
            /// <param name='apiVersion'>
            /// Api version string.
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Optional. Provides a client-generated opaque value that is recorded in the
            /// logs. Using this header is highly recommended for correlating client-side
            /// activities with requests received by the server.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DeleteModelHeaders> DeleteModelAsync(this IDigitalTwinRepositoryService operations, string modelId, string repositoryId, string apiVersion, string xMsClientRequestId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteModelWithHttpMessagesAsync(modelId, repositoryId, apiVersion, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Searches repository for Digital twin models matching supplied search
            /// options.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='searchOptions'>
            /// searchKeyword: To search models with the keyword.
            /// modelFilterType: To filter a type of Digital twin models (Ex: Interface or
            /// CapabilityModel).
            /// pageSize: Page size per request.
            /// continuationToken: When there are more results than a page size, server
            /// responds with a continuation token. Supply this token to retrieve next page
            /// results.
            /// </param>
            /// <param name='apiVersion'>
            /// Api version string.
            /// </param>
            /// <param name='repositoryId'>
            /// Private repository id. To access global repository, caller should not
            /// specify this value.
            /// </param>
            /// <param name='xMsClientRequestId'>
            /// Optional. Provides a client-generated opaque value that is recorded in the
            /// logs. Using this header is highly recommended for correlating client-side
            /// activities with requests received by the server..
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SearchResponse> SearchModelAsync(this IDigitalTwinRepositoryService operations, SearchOptions searchOptions, string apiVersion, string repositoryId = default(string), string xMsClientRequestId = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SearchModelWithHttpMessagesAsync(searchOptions, apiVersion, repositoryId, xMsClientRequestId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
