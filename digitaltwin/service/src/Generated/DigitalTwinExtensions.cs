// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.IoT.DigitalTwin.Service.Generated
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DigitalTwin.
    /// </summary>
    internal static partial class DigitalTwinExtensions
    {
            /// <summary>
            /// Gets the list of interfaces.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            internal static async Task<string> GetInterfacesAsync(this IDigitalTwin operations, string digitalTwinId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInterfacesWithHttpMessagesAsync(digitalTwinId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates desired properties of multiple interfaces.
            /// Example URI: "digitalTwins/{digitalTwinId}/interfaces"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// </param>
            /// <param name='patch'>
            /// Multiple interfaces desired properties to update.
            /// </param>
            /// <param name='ifMatch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            internal static async Task<string> UpdateInterfacesAsync(this IDigitalTwin operations, string digitalTwinId, string patch, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateInterfacesWithHttpMessagesAsync(digitalTwinId, patch, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the interface of given interfaceId.
            /// Example URI: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// </param>
            /// <param name='interfaceName'>
            /// The interface name.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            internal static async Task<string> GetInterfaceAsync(this IDigitalTwin operations, string digitalTwinId, string interfaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetInterfaceWithHttpMessagesAsync(digitalTwinId, interfaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a DigitalTwin model definition for the given id.
            /// If "expand" is present in the query parameters and id is for a device
            /// capability model then it returns
            /// the capability metamodel with expanded interface definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
            /// </param>
            /// <param name='expand'>
            /// Indicates whether to expand the device capability model's interface
            /// definitions inline or not.
            /// This query parameter ONLY applies to Capability model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            internal static async Task<object> GetDigitalTwinModelAsync(this IDigitalTwin operations, string modelId, bool? expand = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDigitalTwinModelWithHttpMessagesAsync(modelId, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke a digital twin interface command.
            /// </summary>
            /// <remarks>
            /// Invoke a digital twin interface command.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// </param>
            /// <param name='interfaceName'>
            /// </param>
            /// <param name='commandName'>
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='connectTimeoutInSeconds'>
            /// Connect timeout in seconds.
            /// </param>
            /// <param name='responseTimeoutInSeconds'>
            /// Response timeout in seconds.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            internal static async Task<object> InvokeInterfaceCommandAsync(this IDigitalTwin operations, string digitalTwinId, string interfaceName, string commandName, object payload = default(object), int? connectTimeoutInSeconds = default(int?), int? responseTimeoutInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InvokeInterfaceCommandWithHttpMessagesAsync(digitalTwinId, interfaceName, commandName, payload, connectTimeoutInSeconds, responseTimeoutInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}