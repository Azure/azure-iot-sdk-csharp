// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.IoT.DigitalTwin.Service
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DigitalTwin.
    /// </summary>
    public static partial class DigitalTwinExtensions
    {
            /// <summary>
            /// Gets the properties of interfaces.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            public static DigitalTwinInterfaces GetAllInterfaces(this IDigitalTwin operations, string digitalTwinId)
            {
                return operations.GetAllInterfacesAsync(digitalTwinId).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of interfaces.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DigitalTwinInterfaces> GetAllInterfacesAsync(this IDigitalTwin operations, string digitalTwinId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetAllInterfacesWithHttpMessagesAsync(digitalTwinId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates desired properties of multiple interfaces.
            /// Example URI: "digitalTwins/{digitalTwinId}/interfaces"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            /// <param name='interfacesPatchInfo'>
            /// Multiple interfaces desired properties to update.
            /// </param>
            /// <param name='ifMatch'>
            /// </param>
            public static DigitalTwinInterfaces UpdateMultipleInterfaces(this IDigitalTwin operations, string digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, string ifMatch = default(string))
            {
                return operations.UpdateMultipleInterfacesAsync(digitalTwinId, interfacesPatchInfo, ifMatch).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Updates desired properties of multiple interfaces.
            /// Example URI: "digitalTwins/{digitalTwinId}/interfaces"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            /// <param name='interfacesPatchInfo'>
            /// Multiple interfaces desired properties to update.
            /// </param>
            /// <param name='ifMatch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DigitalTwinInterfaces> UpdateMultipleInterfacesAsync(this IDigitalTwin operations, string digitalTwinId, DigitalTwinInterfacesPatch interfacesPatchInfo, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateMultipleInterfacesWithHttpMessagesAsync(digitalTwinId, interfacesPatchInfo, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Gets the properties of given interface.
            /// Example URI: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            /// <param name='interfaceName'>
            /// Interface name, for example &lt;example&gt;myThermostat&lt;/example&gt;.
            /// </param>
            public static DigitalTwinInterfaces GetSingleInterface(this IDigitalTwin operations, string digitalTwinId, string interfaceName)
            {
                return operations.GetSingleInterfaceAsync(digitalTwinId, interfaceName).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Gets the properties of given interface.
            /// Example URI: "digitalTwins/{digitalTwinId}/interfaces/{interfaceName}"
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            /// <param name='interfaceName'>
            /// Interface name, for example &lt;example&gt;myThermostat&lt;/example&gt;.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DigitalTwinInterfaces> GetSingleInterfaceAsync(this IDigitalTwin operations, string digitalTwinId, string interfaceName, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSingleInterfaceWithHttpMessagesAsync(digitalTwinId, interfaceName, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke a digital twin interface command.
            /// </summary>
            /// <remarks>
            /// Invoke a digital twin interface command.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            /// <param name='interfaceName'>
            /// Interface name, for example &lt;example&gt;myThermostat&lt;/example&gt;.
            /// </param>
            /// <param name='commandName'>
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='responseTimeoutInSeconds'>
            /// Response timeout in seconds.
            /// </param>
            /// <param name='connectTimeoutInSeconds'>
            /// Connect timeout in seconds.
            /// </param>
            public static object InvokeInterfaceCommand(this IDigitalTwin operations, string digitalTwinId, string interfaceName, string commandName, object payload, int? responseTimeoutInSeconds = default(int?), int? connectTimeoutInSeconds = default(int?))
            {
                return operations.InvokeInterfaceCommandAsync(digitalTwinId, interfaceName, commandName, payload, responseTimeoutInSeconds, connectTimeoutInSeconds).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Invoke a digital twin interface command.
            /// </summary>
            /// <remarks>
            /// Invoke a digital twin interface command.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='digitalTwinId'>
            /// Digital Twin ID. Format of digitalTwinId is DeviceId[~ModuleId]. ModuleId
            /// is optional.
            /// Example 1: "myDevice"
            /// Example 2: "myDevice~module1"
            /// </param>
            /// <param name='interfaceName'>
            /// Interface name, for example &lt;example&gt;myThermostat&lt;/example&gt;.
            /// </param>
            /// <param name='commandName'>
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='responseTimeoutInSeconds'>
            /// Response timeout in seconds.
            /// </param>
            /// <param name='connectTimeoutInSeconds'>
            /// Connect timeout in seconds.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InvokeInterfaceCommandAsync(this IDigitalTwin operations, string digitalTwinId, string interfaceName, string commandName, object payload, int? responseTimeoutInSeconds = default(int?), int? connectTimeoutInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InvokeInterfaceCommandWithHttpMessagesAsync(digitalTwinId, interfaceName, commandName, payload, responseTimeoutInSeconds, connectTimeoutInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Returns a DigitalTwin model definition for the given "id".
            /// If "expand" is present in the query parameters and "id" is for a device
            /// capability model then it returns
            /// the capability metamodel with expanded interface definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
            /// </param>
            /// <param name='expand'>
            /// Indicates whether to expand the device capability model's interface
            /// definitions inline or not.
            /// This query parameter ONLY applies to Capability model.
            /// </param>
            public static object GetDigitalTwinModel(this IDigitalTwin operations, string modelId, bool? expand = false)
            {
                return operations.GetDigitalTwinModelAsync(modelId, expand).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Returns a DigitalTwin model definition for the given "id".
            /// If "expand" is present in the query parameters and "id" is for a device
            /// capability model then it returns
            /// the capability metamodel with expanded interface definitions.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='modelId'>
            /// Model id Ex: &lt;example&gt;urn:contoso:TemperatureSensor:1&lt;/example&gt;
            /// </param>
            /// <param name='expand'>
            /// Indicates whether to expand the device capability model's interface
            /// definitions inline or not.
            /// This query parameter ONLY applies to Capability model.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDigitalTwinModelAsync(this IDigitalTwin operations, string modelId, bool? expand = false, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDigitalTwinModelWithHttpMessagesAsync(modelId, expand, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
