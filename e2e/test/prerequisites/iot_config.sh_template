#!/usr/bin/env bash
# Copyright (c) Microsoft. All rights reserved.
# Licensed under the MIT license. See LICENSE file in the project root for full license information.

# To configure your environment, dot-source this before running the E2E tests.
# . iot_config.sh

# ---------- IoT Hub Configuration ----------
# See Configuration.IoTHub.cs for usage details.

# IoT Hub Owner connection string:
export IOTHUB_CONN_STRING_CSHARP=""

# Use the following Powershell command to retrieve the Base64 encoding of a file:
# Use Powershell: [Convert]::ToBase64String((Get-Content myFileName -Encoding Byte)) to generate.

# X509 Certificate 1 thumbprint:
export IOTHUB_PFX_X509_THUMBPRINT=
# X509 PFX Base64 encoded Certificate 1 (empty password):
export IOTHUB_X509_PFX_CERTIFICATE=

# EventHub connection string for the messages/events endpoint:
export IOTHUB_EVENTHUB_CONN_STRING_CSHARP=

# EventHub compatible name:
export IOTHUB_EVENTHUB_COMPATIBLE_NAME=

# EventHub consumer group:
export IOTHUB_EVENTHUB_CONSUMER_GROUP=

# ---------- Azure Security Center for IoT - Log Analytics Configuration ----------
# the iot hub above must be registered to Azure Security Center for IoT security solution
# with the feature export raw events set to on

# the Azure Security Center for IoT Log Analytics workspace that connected to the hub
export LA_WORKSPACE_ID=""

# the Azure Active Directory tenant of the Log Analytics workspace
export LA_AAD_TENANT=""

# the Azure Active Directory app id that has reader role on the workspace
export LA_AAD_APP_ID=""

# the certificate credentials for the given app
export LA_AAD_APP_CERT_BASE64=""

# ---------- Variables required for running Azure IoT Hub Stress Test and Azure IoT Samples for C# ------------
# Device primary and secondary connection strings:
export IOTHUB_DEVICE_CONN_STRING=
export IOTHUB_DEVICE_CONN_STRING2=

# IoT Hub Module connection string:
export IOTHUB_MODULE_CONN_STRING=
export IOTHUB_MODULE_CONN_STRING2=

# ---------- Device Provisioning Service Configuration ----------
# See Configuration.Provisioning.cs for usage details.

# DPS ID Scope
export DPS_IDSCOPE=

# The DPS Global Device Endpoint (the default is defined in code)
#export DPS_GLOBALDEVICEENDPOINT=global.azure-devices-provisioning.net
# X509 PFX Base64 encoded Device Certificate with recommended RegistrationID: iothubx509device1 (recommended IOTHub DeviceID: provisionedx509device1)
# This certificate should have CN=<RegistrationID>.
export DPS_INDIVIDUALX509_PFX_CERTIFICATE=

# X509 PFX Group certificate.
# RegistrationID/DeviceID is xdevice1.
# This certificate should have CN=xdevice1
export DPS_GROUPX509_PFX_CERTIFICATE=

# X509 PFX Certificate password
export DPS_X509_PFX_CERTIFICATE_PASSWORD=

# X509 P7B Certificate chain.
# This is the chain ending up in the root that has been verified by the Provisioning service.
# The CN=xdevice1 certificate should be signed by an issuer within this chain.
export DPS_GROUPX509_CERTIFICATE_CHAIN=

# Provisioning service owner connection string.
export PROVISIONING_CONNECTION_STRING=""

# Custom allocation webhook url
# This webhook is used during provisioning tests to provision devices to certain iot hubs
# For these tests, the azure function is expected to always choose to provision to the hub with the longest hostname
export CUSTOM_ALLOCATION_POLICY_WEBHOOK=""

# Far away iot hub hostname.
# Reprovisioning tests rely on the dps instance under test to have two linked iothubs to provision to.
# This hub does not currently need to be far away from the dps instance, but it does need to be linked to the dps instance alongside the IOTHUB_CONN_STRING_CSHARP hub.
# Only the hostname is needed, not the full connection string
export FAR_AWAY_IOTHUB_HOSTNAME=""

# ---------- Invalid Certificate validation ----------
# The connection strings below point to servers with incorrect TLS server certificates. Tests will attempt to connect and expect that the TLS connection ends in a security exception.

export IOTHUB_DEVICE_CONN_STRING_INVALIDCERT=""
export IOTHUB_CONN_STRING_INVALIDCERT=""
export DPS_GLOBALDEVICEENDPOINT_INVALIDCERT=
export PROVISIONING_CONNECTION_STRING_INVALIDCERT=""

# Proxy configuration:
export IOTHUB_PROXY_SERVER_ADDRESS=""
