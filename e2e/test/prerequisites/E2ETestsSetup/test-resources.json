{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "ApplicationInsightsName": {
      "type": "string",
      "defaultValue": "[format('{0}-ai', resourceGroup().name)]",
      "metadata": {
        "description": "The name of application insights."
      }
    },
    "StorageAccountName": {
      "type": "string",
      "metadata": {
        "description": "The name of the storage account used by the IoT hub."
      },
      "maxLength": 24,
      "minLength": 3
    },
    "UserObjectId": {
      "type": "string",
      "metadata": {
        "description": "Signed in user objectId"
      }
    },
    "DpsCustomAllocatorRunCsxContent": {
      "type": "string"
    },
    "DpsCustomAllocatorProjContent": {
      "type": "string"
    },
    "FarRegion": {
      "type": "string",
      "defaultValue": "southeastasia",
      "metadata": {
        "description": "The region for the second IoT hub in a DPS that is far away from the test devices."
      }
    },
    "WebRegion": {
      "type": "string",
      "defaultValue": "CentralUS",
      "metadata": {
        "description": "The region for the website hosting the Azure function."
      }
    },
    "HubName": {
      "type": "string",
      "defaultValue": "[format('{0}-hub', resourceGroup().name)]",
      "metadata": {
        "description": "The name of the main IoT hub used by tests."
      }
    },
    "HubUnitsCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of IoT hub units to be deployed."
      }
    },
    "ConsumerGroupName": {
      "type": "string",
      "defaultValue": "e2e-tests",
      "metadata": {
        "description": "The IoT hub consumer group name."
      }
    },
    "FarHubName": {
      "type": "string",
      "defaultValue": "[format('{0}-hubfar', resourceGroup().name)]",
      "metadata": {
        "description": "The name of the far away IoT hub used by tests."
      }
    },
    "DpsName": {
      "type": "string",
      "defaultValue": "[format('{0}-dps', resourceGroup().name)]",
      "metadata": {
        "description": "The name of DPS used by tests."
      }
    },
    "DpsCustomAllocatorFunctionName": {
      "type": "string",
      "defaultValue": "DpsCustomAllocator"
    },
    "KeyVaultName": {
      "type": "string",
      "defaultValue": "[format('{0}-kv', resourceGroup().name)]",
      "metadata": {
        "description": "The name of the key vault for storing secrets needed for running tests."
      },
      "maxLength": 24,
      "minLength": 3
    },
    "OperationalInsightsName": {
      "type": "string",
      "defaultValue": "[format('{0}-oi', resourceGroup().name)]",
      "metadata": {
        "description": "The name of the operational insights instance."
      }
    },
    "OperationInsightsLocation": {
      "type": "string",
      "defaultValue": "westus2",
      "metadata": {
        "description": "The location for Microsoft.OperationalInsights/workspaces."
      }
    },
    "SecuritySolutionName": {
      "type": "string",
      "defaultValue": "[format('{0}-ss', resourceGroup().name)]",
      "metadata": {
        "description": "The name of the security solution instance."
      }
    },
    "ServerFarmName": {
      "type": "string",
      "defaultValue": "[format('{0}-srv', resourceGroup().name)]",
      "metadata": {
        "description": "The name of the server farm to host a function app for DPS custom allocation."
      }
    },
    "WebsiteName": {
      "type": "string",
      "defaultValue": "[format('{0}-web', resourceGroup().name)]",
      "metadata": {
        "description": "The name of the server farm to host a function app for DPS custom allocation"
      }
    },
    "BlobServiceName": {
      "type": "string",
      "defaultValue": "default",
      "metadata": {
        "description": "The name of BlobService inside the StorageAccount."
      }
    },
    "ContainerName": {
      "type": "string",
      "defaultValue": "fileupload",
      "metadata": {
        "description": "The name of the Container inside the BlobService."
      }
    },
    "UserAssignedManagedIdentityName": {
      "type": "string",
      "metadata": {
        "description": "The name of the user assigned managed identity."
      }
    },
    "EnableIotHubSecuritySolution": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Flag to indicate if IoT hub should have security solution enabled."
      }
    }
  },
  "functions": [],
  "variables": {
    "hubKeysId": "[resourceId('Microsoft.Devices/IotHubs/Iothubkeys', parameters('HubName'), 'iothubowner')]",
    "farHubKeysId": "[resourceId('Microsoft.Devices/IotHubs/Iothubkeys', parameters('FarHubName'), 'iothubowner')]",
    "dpsKeysId": "[resourceId('Microsoft.Devices/ProvisioningServices/keys', parameters('DpsName'), 'provisioningserviceowner')]",
    "functionKeysId": "[resourceId('Microsoft.Web/sites/functions', parameters('WebsiteName'), parameters('DpsCustomAllocatorFunctionName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2015-05-01",
      "name": "[parameters('ApplicationInsightsName')]",
      "kind": "web",
      "location": "WestUs",
      "properties": {
        "Application_Type": "web"
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2018-02-14",
      "name": "[parameters('KeyVaultName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "enabledForDeployment": false,
        "enabledForTemplateDeployment": false,
        "enabledForDiskEncryption": false,
        "accessPolicies": [
          {
            "objectId": "[parameters('UserObjectId')]",
            "tenantId": "[subscription().tenantId]",
            "permissions": {
              "secrets": [
                "all"
              ],
              "certificates": [
                "all"
              ],
              "keys": [
                "all"
              ]
            }
          }
        ],
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "enableSoftDelete": true,
        "networkAcls": {
          "defaultAction": "Allow",
          "bypass": "AzureServices",
          "ipRules": [],
          "virtualNetworkRules": []
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2021-02-01",
      "name": "[parameters('StorageAccountName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "Standard_LRS",
        "tier": "Standard"
      },
      "kind": "Storage",
      "properties": {
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "keyType": "Account",
              "enabled": true
            },
            "blob": {
              "keyType": "Account",
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/{1}', parameters('StorageAccountName'), parameters('BlobServiceName'))]",
      "properties": {
        "deleteRetentionPolicy": {
          "enabled": false
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
      "apiVersion": "2021-02-01",
      "name": "[format('{0}/{1}', format('{0}/{1}', parameters('StorageAccountName'), parameters('BlobServiceName')), parameters('ContainerName'))]",
      "properties": {
        "publicAccess": "None"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', split(format('{0}/{1}', parameters('StorageAccountName'), parameters('BlobServiceName')), '/')[0], split(format('{0}/{1}', parameters('StorageAccountName'), parameters('BlobServiceName')), '/')[1])]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2018-11-30",
      "name": "[parameters('UserAssignedManagedIdentityName')]",
      "location": "[resourceGroup().location]"
    },
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2021-03-03-preview",
      "name": "[parameters('HubName')]",
      "location": "[resourceGroup().location]",
      "identity": {
        "type": "SystemAssigned, UserAssigned",
        "userAssignedIdentities": {
          "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('UserAssignedManagedIdentityName'))]": {}
        }
      },
      "properties": {
        "eventHubEndpoints": {
          "events": {
            "retentionTimeInDays": 1,
            "partitionCount": 4
          }
        },
        "cloudToDevice": {
          "defaultTtlAsIso8601": "PT1H",
          "maxDeliveryCount": 100,
          "feedback": {
            "ttlAsIso8601": "PT1H",
            "lockDurationAsIso8601": "PT5S",
            "maxDeliveryCount": 100
          }
        },
        "messagingEndpoints": {
          "fileNotifications": {
            "ttlAsIso8601": "PT1H",
            "lockDurationAsIso8601": "PT5S",
            "maxDeliveryCount": 100
          }
        },
        "StorageEndPoints": {
          "$default": {
            "sasTtlAsIso8601": "PT1H",
            "connectionString": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}', parameters('StorageAccountName'), listkeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2019-06-01').keys[0].value)]",
            "containerName": "[parameters('ContainerName')]"
          }
        },
        "enableFileUploadNotifications": true
      },
      "sku": {
        "name": "S1",
        "tier": "Standard",
        "capacity": "[parameters('HubUnitsCount')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/{1}', format('{0}/{1}', parameters('StorageAccountName'), parameters('BlobServiceName')), parameters('ContainerName')), '/')[0], split(format('{0}/{1}', format('{0}/{1}', parameters('StorageAccountName'), parameters('BlobServiceName')), parameters('ContainerName')), '/')[1], split(format('{0}/{1}', format('{0}/{1}', parameters('StorageAccountName'), parameters('BlobServiceName')), parameters('ContainerName')), '/')[2])]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('UserAssignedManagedIdentityName'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/IotHubs/eventHubEndpoints/ConsumerGroups",
      "apiVersion": "2018-04-01",
      "name": "[format('{0}/events/{1}', parameters('HubName'), parameters('ConsumerGroupName'))]",
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]"
      ]
    },
    {
      "type": "Microsoft.Devices/IotHubs",
      "apiVersion": "2020-01-01",
      "name": "[parameters('FarHubName')]",
      "location": "[parameters('FarRegion')]",
      "sku": {
        "name": "S1",
        "capacity": 1
      },
      "properties": {}
    },
    {
      "type": "Microsoft.Devices/provisioningServices",
      "apiVersion": "2017-11-15",
      "name": "[parameters('DpsName')]",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "S1",
        "capacity": 1
      },
      "properties": {
        "iotHubs": [
          {
            "location": "[resourceGroup().location]",
            "connectionString": "[format('HostName={0}.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey={1}', parameters('HubName'), listkeys(variables('hubKeysId'), '2020-01-01').primaryKey)]"
          },
          {
            "location": "[parameters('FarRegion')]",
            "connectionString": "[format('HostName={0}.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey={1}', parameters('FarHubName'), listkeys(variables('farHubKeysId'), '2020-01-01').primaryKey)]"
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', parameters('FarHubName'))]",
        "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]"
      ]
    },
    {
      "condition": "[parameters('EnableIotHubSecuritySolution')]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2017-03-15-preview",
      "name": "[parameters('OperationalInsightsName')]",
      "location": "[parameters('OperationInsightsLocation')]",
      "properties": {}
    },
    {
      "condition": "[parameters('EnableIotHubSecuritySolution')]",
      "type": "Microsoft.Security/iotSecuritySolutions",
      "apiVersion": "2019-08-01",
      "name": "[parameters('SecuritySolutionName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "workspace": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('OperationalInsightsName'))]",
        "status": "Enabled",
        "export": [
          "RawEvents"
        ],
        "disabledDataSources": [],
        "displayName": "[parameters('SecuritySolutionName')]",
        "iotHubs": [
          "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]"
        ],
        "recommendationsConfiguration": [],
        "unmaskedIpLoggingStatus": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Devices/IotHubs', parameters('HubName'))]",
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('OperationalInsightsName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-11-01",
      "name": "[parameters('ServerFarmName')]",
      "location": "[parameters('WebRegion')]",
      "kind": "",
      "properties": {
        "name": "[parameters('ServerFarmName')]"
      },
      "sku": {
        "Tier": "Dynamic",
        "Name": "Y1"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[parameters('WebsiteName')]",
      "location": "[parameters('WebRegion')]",
      "kind": "functionapp",
      "properties": {
        "name": "[parameters('WebsiteName')]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "3.0.14916"
            },
            {
              "name": "FUNCTIONS_V2_COMPATIBILITY_MODE",
              "value": "true"
            },
            {
              "name": "FUNCTIONS_WORKER_RUNTIME",
              "value": "dotnet"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('StorageAccountName'), listkeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('StorageAccountName'), listkeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2019-06-01').keys[0].value)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(parameters('DpsCustomAllocatorFunctionName'))]"
            }
          ]
        },
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('ServerFarmName'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('ServerFarmName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName'))]"
      ]
    },
    {
      "type": "Microsoft.Web/sites/functions",
      "apiVersion": "2018-11-01",
      "name": "[format('{0}/{1}', parameters('WebsiteName'), parameters('DpsCustomAllocatorFunctionName'))]",
      "properties": {
        "config": {
          "bindings": [
            {
              "name": "req",
              "type": "httpTrigger",
              "direction": "in",
              "schedule": "[parameters('DpsCustomAllocatorFunctionName')]"
            },
            {
              "name": "$return",
              "type": "http",
              "direction": "out"
            }
          ],
          "disabled": false
        },
        "files": {
          "run.csx": "[base64ToString(parameters('DpsCustomAllocatorRunCsxContent'))]",
          "function.proj": "[base64ToString(parameters('DpsCustomAllocatorProjContent'))]"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('WebsiteName'))]"
      ]
    }
  ],
  "outputs": {
    "hubName": {
      "type": "string",
      "value": "[parameters('HubName')]"
    },
    "hubConnectionString": {
      "type": "string",
      "value": "[format('HostName={0}.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey={1}', parameters('HubName'), listkeys(variables('hubKeysId'), '2019-11-04').primaryKey)]"
    },
    "farHubHostName": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Devices/IotHubs', parameters('FarHubName'))).hostName]"
    },
    "farHubConnectionString": {
      "type": "string",
      "value": "[format('HostName={0}.azure-devices.net;SharedAccessKeyName=iothubowner;SharedAccessKey={1}', parameters('FarHubName'), listkeys(variables('farHubKeysId'), '2019-11-04').primaryKey)]"
    },
    "dpsName": {
      "type": "string",
      "value": "[parameters('DpsName')]"
    },
    "dpsConnectionString": {
      "type": "string",
      "value": "[format('HostName={0}.azure-devices-provisioning.net;SharedAccessKeyName=provisioningserviceowner;SharedAccessKey={1}', parameters('DpsName'), listkeys(variables('dpsKeysId'), '2017-11-15').primaryKey)]"
    },
    "storageAccountConnectionString": {
      "type": "string",
      "value": "[format('DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1};EndpointSuffix=core.windows.net', parameters('StorageAccountName'), listkeys(resourceId('Microsoft.Storage/storageAccounts', parameters('StorageAccountName')), '2019-06-01').keys[0].value)]"
    },
    "workspaceId": {
      "type": "string",
      "value": "[if(parameters('EnableIotHubSecuritySolution'), reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('OperationalInsightsName')), '2017-03-15-preview').customerId, '')]"
    },
    "customAllocationPolicyWebhook": {
      "type": "string",
      "value": "[format('https://{0}.azurewebsites.net/api/{1}?code={2}', parameters('WebsiteName'), parameters('DpsCustomAllocatorFunctionName'), listkeys(variables('functionKeysId'), '2019-08-01').default)]"
    },
    "keyVaultName": {
      "type": "string",
      "value": "[parameters('KeyVaultName')]"
    },
    "instrumentationKey": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Insights/components', parameters('ApplicationInsightsName')), '2015-05-01').InstrumentationKey]"
    }
  },
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.3.1.62928",
      "templateHash": "129270437041242196"
    }
  }
}