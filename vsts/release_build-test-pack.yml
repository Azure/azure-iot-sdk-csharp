name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
  - repo: self
    clean: true

jobs:
  
  ### Build nuget packages ###
  - job: Build_Packages
    displayName: Build Nuget Packages
    timeoutInMinutes: 20

    condition: succeeded()
    pool:
      vmImage: windows-2022

    steps:

      - task: PowerShell@2
        displayName: 'Build Packages'
        name: BUILD_PKG
        inputs:
          targetType: 'inline'
          script: |
            $env:FILE_DATE = get-date -f yyyy-MM-dd-hh-mm-ss.f
            Write-Host Package Folder will be appended with date suffix: $env:FILE_DATE
            Write-Host "##vso[task.setvariable variable=NUGET_PKG_DATE;isoutput=true;]$env:FILE_DATE"
            Write-Host Start building release package with $(Agent.Id):$(Agent.MachineName) on $env:FILE_DATE
            $(Build.SourcesDirectory)/build.ps1 -build -clean -configuration Release -package

      - task: PowerShell@2
        displayName: 'Rename Packages for Partner Release Pipeline'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host ""
            Rename-Item $(Build.SourcesDirectory)/bin/pkg $(Build.SourcesDirectory)/bin/pkgs_$(BUILD_PKG.NUGET_PKG_DATE)
            Write-Host " "
            Write-Host "Package contents (renamed):"
            gci -Path $(Build.SourcesDirectory)/bin -Recurse -Force

      - task: AzureFileCopy@2
        displayName: 'File Copy to Partner Release Pipeline Storage'
        inputs:
          SourcePath: '$(Build.SourcesDirectory)/bin'
          azureSubscription: azuresdkpartnerdrops
          Destination: AzureBlob
          storage: azuresdkpartnerdrops
          ContainerName: 'drops/azure-iot-sdk/net'

#      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
#        displayName: 'SBOM Generation Task'
#        inputs:
#          BuildDropPath: '$(Build.SourcesDirectory)/bin/pkgs_$(BUILD_PKG.NUGET_PKG_DATE)'

  ### Windows Tests ###
  - job: Windows_Test
    displayName: Windows Tests
    timeoutInMinutes: 75

    strategy:
      # Change maxParallel to 1 make builds run in serial rather than in parallel
      maxParallel: 10
      matrix:
        .Net 6.0:
          FRAMEWORK: net6.0
        .Net 5.0:
          FRAMEWORK: net5.0
        .Net Core 3.1:
          FRAMEWORK: netcoreapp3.1
        .Net Core 2.1.30:
          FRAMEWORK: netcoreapp2.1.30
        .Net Framwork 4.7.2:
          FRAMEWORK: net472
        .Net Framework 4.5.1:
          FRAMEWORK: net451

    condition: succeeded()
    dependsOn: Build_Packages
    pool:
      vmImage: windows-2022
    
    variables:
      NUGET_PACKGE_FOLDER: $[ dependencies.Build_Packages.outputs['BUILD_PKG.NUGET_PKG_DATE'] ]

    steps:

      - task: AzureCLI@2
        displayName: File Copy from Partner Release Pipeline Storage'
        inputs:
          azureSubscription: azuresdkpartnerdrops
          scriptType: ps
          scriptLocation: inlineScript
          inlineScript: |
            Write-Host "Prepare testing on $(Agent.Id):$(Agent.MachineName)"
            Write-Host "Copy release package to $(System.DefaultWorkingDirectory)/bin/nuget/pkgs_$(NUGET_PACKGE_FOLDER)"
            $env:AZCOPY_SPA_CLIENT_SECRET="b1x/AsPIm09FWjuedF46m7D1kxHQHcx+ptu9310TNtE=" 
            azcopy login --service-principal --application-id cfb5fe52-8bb2-4901-9056-70449fa2df96
            azcopy copy "https://azuresdkpartnerdrops.blob.core.windows.net/drops/azure-iot-sdk/net/pkgs_$(NUGET_PACKGE_FOLDER)/*" "$(System.DefaultWorkingDirectory)/bin/nuget" --recursive
            
      - task: PowerShell@2
        displayName: 'Downloaded files checkpoint'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Download contents:"
            gci -Path $(System.DefaultWorkingDirectory)/bin/nuget -Recurse -Force

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 6.x'
        inputs:
          packageType: sdk
          version: 6.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 5.x'
        inputs:
          packageType: sdk
          version: 5.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 3.x'
        inputs:
          packageType: sdk
          version: 3.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET core SDK 2.x'
        inputs:
          packageType: sdk
          version: 2.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net
 
      - script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          sn -Vr *,31bf3856ad364e35
        displayName: 'Disable strong name validation'

      - script: |
          choco install -y squid
        displayName: 'Setup Proxy (Squid)'

      - task: PowerShell@2
        displayName: 'Setup TPM Simulator (EXE)'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host Start TPM Simulator
            Start $(Build.SourcesDirectory)\vsts\TpmSimulator\Simulator.exe

      - powershell: ./vsts/releaseTest.ps1
        displayName: 'E2E Tests'
        env:
          # Local nuget packages for testing
          AZURE_IOT_LOCALPACKAGES: $(Build.SourcesDirectory)/bin/nuget
          # Environment variables for IoT Hub E2E tests
          IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
          IOTHUB_X509_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-DEVICE-PFX-CERTIFICATE)
          IOTHUB_X509_CHAIN_DEVICE_NAME: $(IOTHUB-X509-CHAIN-DEVICE-NAME)
          IOTHUB_X509_CHAIN_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-CHAIN-DEVICE-PFX-CERTIFICATE)
          IOTHUB_USER_ASSIGNED_MSI_RESOURCE_ID: $(IOTHUB-USER-ASSIGNED-MSI-RESOURCE-ID)
          # Environment variables for DPS E2E tests
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          FAR_AWAY_IOTHUB_HOSTNAME: $(FAR-AWAY-IOTHUB-HOSTNAME)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_X509_GROUP_ENROLLMENT_NAME: $(DPS-X509-GROUP-ENROLLMENT-NAME)
          # Environment variables for Azure resources used for E2E tests (common)
          X509_CHAIN_ROOT_CA_CERTIFICATE: $(X509-CHAIN-ROOT-CA-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE1_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE1-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_PFX_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-PFX-CERTIFICATE)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          MSFT_TENANT_ID: $(MSFT-TENANT-ID)
          # Environment variables for E2E Tests
          E2E_IKEY: $(E2E-IKEY)
          E2E_TEST_AAD_APP_CLIENT_ID: $(E2E-TEST-AAD-APP-CLIENT-ID)
          E2E_TEST_AAD_APP_CLIENT_SECRET: $(E2E-TEST-AAD-APP-CLIENT-SECRET)
          # Environment variables for the DevOps pipeline
          PROXY_SERVER_ADDRESS: 127.0.0.1:3128
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)
          # Environment variables for invalid certificate tests
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          # Environment variables used by Log Analytics Workspace for Azure Security Center
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)

      - task: CopyFiles@2
        displayName: 'Copy TRX files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.trx'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()

      - task: CopyFiles@2
        displayName: 'Copy ETL files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.etl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: testresults_windows_$(FRAMEWORK)'
        inputs:
          ArtifactName: testresults_windows_$(FRAMEWORK)
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish Test Results: $(FRAMEWORK)/**/*.trx'
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          testRunTitle: 'Windows Tests $(FRAMEWORK)'
          platform: Windows
          configuration: 'Debug UT + Release E2E ($(FRAMEWORK))'
        condition: always()

  ### Linux Tests ###
  - job: Linux_Test
    displayName: Linux Tests
    timeoutInMinutes: 90

    strategy:
      # Change maxParallel to 1 make builds run in serial rather than in parallel
      maxParallel: 10
      matrix:
        .Net 6.0:
          FRAMEWORK: net6.0
        .Net 5.0:
          FRAMEWORK: net5.0
        .Net Core 3.1:
          FRAMEWORK: netcoreapp3.1
        .Net Core 2.1.30:
          FRAMEWORK: netcoreapp2.1.30

    condition: succeeded()
    dependsOn: Build_Packages
    pool:
      vmImage: ubuntu-20.04
    
    variables:
      NUGET_PACKGE_FOLDER: $[ dependencies.Build_Packages.outputs['BUILD_PKG.NUGET_PKG_DATE'] ]

    steps:

      - task: Bash@3
        displayName: Install azcopy
        # Install azcopy v10 until there is build-in azcopy v10 feature for Linux agent
        inputs:
          targetType: 'inline'
          script: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
            mkdir $(Agent.ToolsDirectory)/azcopy && cd "$_"
            wget -O azcopy_v10.tar.gz https://aka.ms/downloadazcopy-v10-linux
            tar -xf azcopy_v10.tar.gz --strip-components=1

      - task: AzureCLI@2
        displayName: File Copy from Partner Release Pipeline Storage'
        inputs:
          azureSubscription: azuresdkpartnerdrops
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            echo "Prepare testing on $(Agent.Id):$(Agent.MachineName)"
            echo "Copy release package to $(System.DefaultWorkingDirectory)/bin/nuget/pkgs_$(NUGET_PACKGE_FOLDER)"
            export AZCOPY_SPA_CLIENT_SECRET="b1x/AsPIm09FWjuedF46m7D1kxHQHcx+ptu9310TNtE=" 
            $(Agent.ToolsDirectory)/azcopy/azcopy login --service-principal --application-id cfb5fe52-8bb2-4901-9056-70449fa2df96
            $(Agent.ToolsDirectory)/azcopy/azcopy copy "https://azuresdkpartnerdrops.blob.core.windows.net/drops/azure-iot-sdk/net/pkgs_$(NUGET_PACKGE_FOLDER)/*" "$(System.DefaultWorkingDirectory)/bin/nuget" --recursive

      - task: Bash@3
        displayName: 'Downloaded files checkpoint'
        inputs:
          targetType: 'inline'
          script: |
            echo "Download contents:"
            ls -al $(System.DefaultWorkingDirectory)/bin/nuget

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 6.x'
        inputs:
          packageType: sdk
          version: 6.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 5.x'
        inputs:
          packageType: sdk
          version: 5.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 3.x'
        inputs:
          packageType: sdk
          version: 3.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 2.x'
        inputs:
          packageType: sdk
          version: 2.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net
 
      - task: Docker@1
        displayName: "Start TPM Simulator"
        inputs:
          containerregistrytype: "Container Registry"
          command: "Run an image"
          imageName: aziotbld/testtpm
          containerName: "testtpm-instance"
          ports: |
            127.0.0.1:2321:2321
            127.0.0.1:2322:2322
          restartPolicy: unlessStopped

      - task: Docker@1
        displayName: 'Start Test Proxy'
        inputs:
          containerregistrytype: 'Container Registry'
          command: 'Run an image'
          imageName: aziotbld/testproxy
          containerName: 'testproxy-instance'
          ports: '127.0.0.1:8888:8888'
          restartPolicy: unlessStopped

      - powershell: ./vsts/releaseTest.ps1
        displayName: 'E2E Tests'
        env:
          # Local nuget packages for testing
          AZURE_IOT_LOCALPACKAGES: $(Build.SourcesDirectory)/bin/nuget
          # Environment variables for IoT Hub E2E tests
          IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
          IOTHUB_X509_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-DEVICE-PFX-CERTIFICATE)
          IOTHUB_X509_CHAIN_DEVICE_NAME: $(IOTHUB-X509-CHAIN-DEVICE-NAME)
          IOTHUB_X509_CHAIN_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-CHAIN-DEVICE-PFX-CERTIFICATE)
          IOTHUB_USER_ASSIGNED_MSI_RESOURCE_ID: $(IOTHUB-USER-ASSIGNED-MSI-RESOURCE-ID)
          # Environment variables for DPS E2E tests
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          FAR_AWAY_IOTHUB_HOSTNAME: $(FAR-AWAY-IOTHUB-HOSTNAME)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_X509_GROUP_ENROLLMENT_NAME: $(DPS-X509-GROUP-ENROLLMENT-NAME)
          # Environment variables for Azure resources used for E2E tests (common)
          X509_CHAIN_ROOT_CA_CERTIFICATE: $(X509-CHAIN-ROOT-CA-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE1_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE1-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_PFX_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-PFX-CERTIFICATE)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          MSFT_TENANT_ID: $(MSFT-TENANT-ID)
          # Environment variables for E2E Tests
          E2E_IKEY: $(E2E-IKEY)
          E2E_TEST_AAD_APP_CLIENT_ID: $(E2E-TEST-AAD-APP-CLIENT-ID)
          E2E_TEST_AAD_APP_CLIENT_SECRET: $(E2E-TEST-AAD-APP-CLIENT-SECRET)
          # Environment variables for the DevOps pipeline
          PROXY_SERVER_ADDRESS: 127.0.0.1:3128
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)
          # Environment variables for invalid certificate tests
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          # Environment variables used by Log Analytics Workspace for Azure Security Center
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)

      - task: CopyFiles@2
        displayName: 'Copy TRX files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.trx'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()
      
      - task: CopyFiles@2
        displayName: 'Copy ETL files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.etl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifact: testresults_linux_$(FRAMEWORK)'
        inputs:
          ArtifactName: testresults_linux_$(FRAMEWORK)
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish Test Results $(FRAMEWORK)/**/*.trx'
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          testRunTitle: 'Linux Tests $(FRAMEWORK)'
        condition: always()
