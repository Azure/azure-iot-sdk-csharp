name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
- repo: self
  clean: true
phases:

- phase: DEVEXP
  displayName: csharp-deviceexplorer

  condition: succeeded()
  queue:
    name: sdl-csharp
    timeoutInMinutes: 60

  steps:
  - powershell: ./vsts/manual_checkout.ps1 
    displayName: 'GIT checkout'
    env:
      COMMIT_FROM: $(COMMIT_FROM)

  - script: |  
       call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\Common7\\Tools\\VsDevCmd.bat"
       pushd tools\DeviceExplorer
       call build.cmd -clean -configuration Debug -nopackage
    displayName: build

  - powershell: ./vsts/manual_checkout.ps1
    displayName: 'GIT checkout'
    env:
      COMMIT_FROM: $(COMMIT_FROM)

# BEGIN: SDL and Compliance tasks #

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'


  - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
    displayName: 'Run MpCmdRun.exe'
    inputs:
      EnableServices: true


  - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
    displayName: 'Run AutoApplicability'
    inputs:
      ExternalRelease: true

      IsSoftware: true

      UsesHSM: true


  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim '
    inputs:
      arguments: 'analyze  $(Build.SourcesDirectory)\DeviceExplorer.exe --recurse --verbose'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-codemetrics.CodeMetrics@1
    displayName: 'Run CodeMetrics '
    inputs:
      Files: '$(Build.SourcesDirectory)\**\DeviceExplorer.exe'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'Run CredScan'
    inputs:
      regexMatchTimeoutInSeconds: 5

      debugMode: false

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'Run PoliCheck'
    inputs:
      targetType: F

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
    displayName: 'Run Vulnerability Assessment'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
    displayName: 'Create Security Analysis Report'
    inputs:
      AllTools: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload'
    inputs:
      tsaStamp: Azure

      codeBaseName: 'Azure-Iot-SDK-CSharp-Master'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      AllTools: true

# END: SDL and Compliance tasks #

### WINDOWS Analyzers ###
- phase: Analyzers
  displayName: Analyzers

  condition: succeeded()
  queue:
    name: sdl-csharp
    timeoutInMinutes: 60
  steps:

  - powershell: ./vsts/manual_checkout.ps1
    displayName: 'GIT checkout'
    env:
      COMMIT_FROM: $(COMMIT_FROM)

  - script: |
       rem Run dotnet first experience.
       dotnet new

       rem Start build
       build.cmd -clean -nounittests -configuration Debug

    displayName: build

# BEGIN: SDL and Compliance tasks #

  - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
    displayName: 'Component Detection'


  - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
    displayName: 'Run MpCmdRun.exe'
    inputs:
      EnableServices: true


  - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
    displayName: 'Run AutoApplicability'
    inputs:
      ExternalRelease: true

      IsSoftware: true

      UsesHSM: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
    displayName: 'Run BinSkim '
    inputs:
      arguments: 'analyze  $(Build.SourcesDirectory)\Microsoft.Azure.Devices.*.dll --recurse --verbose'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-codemetrics.CodeMetrics@1
    displayName: 'Run CodeMetrics '
    inputs:
      Files: '$(Build.SourcesDirectory)\**\Microsoft.Azure.Devices.*.dll'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
    displayName: 'Run CredScan'
    inputs:
      regexMatchTimeoutInSeconds: 5

      debugMode: false

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
    displayName: 'Run PoliCheck'
    inputs:
      targetType: F

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
    displayName: 'Run Vulnerability Assessment'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
    displayName: 'Publish Security Analysis Logs'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
    displayName: 'Create Security Analysis Report'
    inputs:
      AllTools: true

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
    displayName: 'TSA upload'
    inputs:
      tsaStamp: Azure

      codeBaseName: 'Azure-Iot-SDK-CSharp-Master'

  - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
    displayName: 'Post Analysis'
    inputs:
      AllTools: true

# END: SDL and Compliance tasks #
