name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
- repo: self
  clean: true
phases:
- phase: LINUX
  displayName: Linux

  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 20
  steps:
  - script: |  
       if [ "$PRID" == "" ]
       then 
        git status
        git reset --hard
        git pull origin $COMMIT_ID
        git checkout origin/$COMMIT_ID
        git pull origin $BRANCH_TO_MERGE_TO
        git checkout origin/$BRANCH_TO_MERGE_TO
        git merge origin/$COMMIT_ID
       else
        git config --global user.email "azioclb@microsoft.com"
        git config --global user.name "Azure IoT Builder"
        git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/*
        git checkout pr/$PRID
        git checkout $BRANCH_TO_MERGE_TO
        git merge pr/$PRID -m "Merging PR $PRID"
       
       fi 
    displayName: 'git checkout'
    env:
      BRANCH_TO_MERGE_TO: $(BRANCH_TO_MERGE_TO)
      COMMIT_ID: $(COMMIT_ID)
      PRID: $(PRID)

  - task: Docker@1
    displayName: 'Start TPM Simulator'
    inputs:
      containerregistrytype: 'Container Registry'

      command: 'Run an image'

      imageName: aziotbld/testtpm

      containerName: 'testtpm-instance'

      ports: |  
       127.0.0.1:2321:2321
       127.0.0.1:2322:2322

      restartPolicy: unlessStopped


  - task: Docker@1
    displayName: 'Start Test Proxy'
    inputs:
      containerregistrytype: 'Container Registry'

      command: 'Run an image'

      imageName: aziotbld/testproxy

      containerName: 'testproxy-instance'

      ports: '127.0.0.1:8888:8888'

      restartPolicy: unlessStopped


  - script: |  
       # Run dotnet first experience.
       dotnet new
       
       # List active docker containers
       docker ps -a
       
       # Start build
       vsts/linux_csharp_netcore.sh 
    displayName: build
    env:
      IOTHUB_CONN_STRING_CSHARP: $(IOTHUB-CONN-STRING-CSHARP)
      IOTHUB_DEVICE_CONN_STRING: $(IOTHUB-DEVICE-CONN-STRING)
      IOTHUB_DEVICE_CONN_STRING2: $(IOTHUB-DEVICE-CONN-STRING2)
      IOTHUB_MODULE_CONN_STRING: $(IOTHUB-MODULE-CONN-STRING)
      IOTHUB_MODULE_CONN_STRING2: $(IOTHUB-MODULE-CONN-STRING2)
      IOTHUB_PFX_X509_THUMBPRINT: $(IOTHUB-PFX-X509-THUMBPRINT)
      IOTHUB_PFX_X509_THUMBPRINT2: $(IOTHUB-PFX-X509-THUMBPRINT2)
      IOTHUB_X509_PFX_CERTIFICATE: $(IOTHUB-X509-PFX-CERTIFICATE)
      IOTHUB_EVENTHUB_CONN_STRING_CSHARP: $(IOTHUB-EVENTHUB-CONN-STRING-CSHARP)
      IOTHUB_EVENTHUB_COMPATIBLE_NAME: $(IOTHUB-EVENTHUB-COMPATIBLE-NAME)
      IOTHUB_EVENTHUB_CONSUMER_GROUP: $(IOTHUB-EVENTHUB-CONSUMER-GROUP)
      DPS_IDSCOPE: $(DPS-IDSCOPE)
      DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
      DPS_INDIVIDUALX509_PFX_CERTIFICATE: $(DPS-INDIVIDUALX509-PFX-CERTIFICATE)
      DPS_GROUPX509_PFX_CERTIFICATE: $(DPS-GROUPX509-PFX-CERTIFICATE)
      DPS_GROUPX509_CERTIFICATE_CHAIN: $(DPS-GROUPX509-CERTIFICATE-CHAIN)
      DPS_TPM_REGISTRATIONID: $(DPS-TPM-REGISTRATIONID)
      DPS_TPM_DEVICEID: $(DPS-TPM-DEVICEID)
      PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
      IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
      IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
      DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
      PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
      IOTHUB_PROXY_SERVER_ADDRESS: 127.0.0.1:8888

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    inputs:
      testRunner: VSTest

      testResultsFiles: '**/*.trx'

    condition: always()

- phase: WINDOWS
  displayName: Windows

  condition: succeeded()
  queue:
    name: Hosted VS2017
    timeoutInMinutes: 60
  steps:
  - script: |  
       call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
       sn -Vr *,31bf3856ad364e35
        
    displayName: 'Disable strong name validation'

  - script: |  
       choco install -y squid
        
    displayName: 'Install Squid'

  - script: |  
       choco install -y netfx-4.5.2-devpack
        
    displayName: 'Install .NET 4.5.2 Targetting Pack'

  - script: |  
       @echo off
       IF "%PRID%"=="" (
       echo %COMMIT_ID%
       ECHO SOURCE BRANCH IS %COMMIT_ID%
       SET sourceBranch=origin/%COMMIT_ID%:refs/heads/=%
       git checkout %BRANCH_TO_MERGE_TO%
       ECHO GIT STATUS
       git status
       ECHO GIT MERGE
       git merge %sourceBranch% -m "Merge to %BRANCH_TO_MERGE_TO%"
       ECHO GIT STATUS
       git status
       EXIT
       )
       git config --global user.email "azioclb@microsoft.com"
       git config --global user.name "Azure IoT Builder"
       git fetch
       git pull origin pull/%PRID%/head
       git checkout %BRANCH_TO_MERGE_TO%
       git pull
       git merge -m "Merging PR %PRID%" 
    displayName: 'git checkout'
    env:
      BRANCH_TO_MERGE_TO: $(BRANCH_TO_MERGE_TO)
      COMMIT_ID: $(COMMIT_ID)
      PRID: $(PRID)

  - script: |  
       rem Run dotnet first experience.
       dotnet new
       
       rem List active docker containers
       docker ps -a
       
       rem Start build
       vsts/windows_csharp.cmd
        
    displayName: build
    env:
      IOTHUB_CONN_STRING_CSHARP: $(IOTHUB-CONN-STRING-CSHARP)
      IOTHUB_DEVICE_CONN_STRING: $(IOTHUB-DEVICE-CONN-STRING)
      IOTHUB_DEVICE_CONN_STRING2: $(IOTHUB-DEVICE-CONN-STRING2)
      IOTHUB_MODULE_CONN_STRING: $(IOTHUB-MODULE-CONN-STRING)
      IOTHUB_MODULE_CONN_STRING2: $(IOTHUB-MODULE-CONN-STRING2)
      IOTHUB_PFX_X509_THUMBPRINT: $(IOTHUB-PFX-X509-THUMBPRINT)
      IOTHUB_PFX_X509_THUMBPRINT2: $(IOTHUB-PFX-X509-THUMBPRINT2)
      IOTHUB_X509_PFX_CERTIFICATE: $(IOTHUB-X509-PFX-CERTIFICATE)
      IOTHUB_EVENTHUB_CONN_STRING_CSHARP: $(IOTHUB-EVENTHUB-CONN-STRING-CSHARP)
      IOTHUB_EVENTHUB_COMPATIBLE_NAME: $(IOTHUB-EVENTHUB-COMPATIBLE-NAME)
      IOTHUB_EVENTHUB_CONSUMER_GROUP: $(IOTHUB-EVENTHUB-CONSUMER-GROUP)
      DPS_IDSCOPE: $(DPS-IDSCOPE)
      DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
      DPS_INDIVIDUALX509_PFX_CERTIFICATE: $(DPS-INDIVIDUALX509-PFX-CERTIFICATE)
      DPS_GROUPX509_PFX_CERTIFICATE: $(DPS-GROUPX509-PFX-CERTIFICATE)
      DPS_GROUPX509_CERTIFICATE_CHAIN: $(DPS-GROUPX509-CERTIFICATE-CHAIN)
      DPS_TPM_REGISTRATIONID: $(DPS-TPM-REGISTRATIONID)
      DPS_TPM_DEVICEID: $(DPS-TPM-DEVICEID)
      PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
      IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
      IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
      DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
      PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
      IOTHUB_PROXY_SERVER_ADDRESS: 127.0.0.1:3128

  - task: PublishTestResults@2
    displayName: 'Publish Test Results **/*.trx'
    inputs:
      testRunner: VSTest

      testResultsFiles: '**/*.trx'

      testRunTitle: 'Azure IoT C#'

      platform: Windows

      configuration: 'Debug UT + Release E2E'

    condition: always()

- phase: NETMF
  displayName: NetMF

  condition: succeeded()
  queue:
    name: win
    timeoutInMinutes: 1
  steps:
  - script: |  
       @echo off
       IF "%PRID%"=="" (
       echo %COMMIT_ID%
       ECHO SOURCE BRANCH IS %COMMIT_ID%
       SET sourceBranch=origin/%COMMIT_ID%:refs/heads/=%
       git checkout %BRANCH_TO_MERGE_TO%
       ECHO GIT STATUS
       git status
       ECHO GIT MERGE
       git merge %sourceBranch% -m "Merge to %BRANCH_TO_MERGE_TO%"
       ECHO GIT STATUS
       git status
       EXIT
       )
       git config --global user.email "azioclb@microsoft.com"
       git config --global user.name "Azure IoT Builder"
       git fetch
       git pull origin pull/%PRID%/head
       git checkout %BRANCH_TO_MERGE_TO%
       git pull
       git merge -m "Merging PR %PRID%" 
    displayName: 'git checkout'
    env:
      COMMIT_ID: $(COMMIT_ID)
      BRANCH_TO_MERGE_TO: $(BRANCH_TO_MERGE_TO)
      PRID: $(PRID)

  - script: |  
       call "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\VsDevCmd.bat"
       vsts/windows_csharp_mf.cmd
        
    displayName: build

- phase: DEVEXP
  displayName: csharp-deviceexplorer

  condition: succeeded()
  queue:
    name: win
    timeoutInMinutes: 5

  steps:
  - script: |  
       @echo off
       IF "%PRID%"=="" (
       echo %COMMIT_ID%
       ECHO SOURCE BRANCH IS %COMMIT_ID%
       SET sourceBranch=origin/%COMMIT_ID%:refs/heads/=%
       git checkout %BRANCH_TO_MERGE_TO%
       ECHO GIT STATUS
       git status
       ECHO GIT MERGE
       git merge %sourceBranch% -m "Merge to %BRANCH_TO_MERGE_TO%"
       ECHO GIT STATUS
       git status
       EXIT
       )
       git config --global user.email "azioclb@microsoft.com"
       git config --global user.name "Azure IoT Builder"
       git fetch
       git pull origin pull/%PRID%/head
       git checkout %BRANCH_TO_MERGE_TO%
       git pull
       git merge -m "Merging PR %PRID%" 
    displayName: git
    env:
      COMMIT_ID: $(COMMIT_ID)
      BRANCH_TO_MERGE_TO: $(BRANCH_TO_MERGE_TO)
      PRID: $(PRID)

  - script: |  
       call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
       vsts/windows_csharp_deviceexplorer.cmd 
    displayName: build

- phase: GITMERGE
  displayName: GitMerge

  dependsOn: 
    - LINUX
    - WINDOWS
    - NETMF
    - DEVEXP
  condition: succeeded()
  queue:
    name: Hosted Ubuntu 1604
    timeoutInMinutes: 5

  steps:
  - script: |  
       @echo off
       IF "%PRID%"=="" (
       echo %COMMIT_ID%
       ECHO SOURCE BRANCH IS %COMMIT_ID%
       SET sourceBranch=origin/%COMMIT_ID%:refs/heads/=%
       git checkout %BRANCH_TO_MERGE_TO%
       ECHO GIT STATUS
       git status
       ECHO GIT MERGE
       git merge %sourceBranch% -m "Merge to %BRANCH_TO_MERGE_TO%"
       ECHO GIT STATUS
       git status
       git push https://%GIT_USERNAME%:%GIT_PASSWORD%@github.com/Sahithkallakunta/azure-iot-sdk-csharp HEAD:%BRANCH_TO_MERGE_TO%
       EXIT
       )
       git config --global user.email "azioclb@microsoft.com"
       git config --global user.name "Azure IoT Builder"
       git fetch origin +refs/pull/*/head:refs/remotes/origin/pr/*
       git checkout pr/%PRID%
       git checkout %BRANCH_TO_MERGE_TO%
       git merge pr/%PRID% -m "Merging PR %PRID%"
       git push https://%GIT_USERNAME%:%GIT_PASSWORD%@github.com/Sahithkallakunta/azure-iot-sdk-csharp HEAD:%BRANCH_TO_MERGE_TO% 
    displayName: 'git push'
    enabled: true
    env:
      COMMIT_ID: $(COMMIT_ID)
      BRANCH_TO_MERGE_TO: $(BRANCH_TO_MERGE_TO)
      PRID: $(PRID)
