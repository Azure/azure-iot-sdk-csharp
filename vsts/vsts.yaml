name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)
resources:
  - repo: self
    clean: true
jobs:
  ### Linux build ###
  - job: LINUX
    displayName: Linux
    strategy:
      maxParallel: 3
      #maxParallel: 1 Uncomment this to make Windows builds run in serial rather than in parallel
      matrix:
        .Net Core 2.1:
          FRAMEWORK: netcoreapp2.1
          
    condition: succeeded()
    pool:
      name: Hosted Ubuntu 1604
      timeoutInMinutes: 180
    steps:
      - task: Docker@1
        displayName: "Start TPM Simulator"
        inputs:
          containerregistrytype: "Container Registry"
          command: "Run an image"
          imageName: aziotbld/testtpm
          containerName: "testtpm-instance"

          ports: |
            127.0.0.1:2321:2321
            127.0.0.1:2322:2322

          restartPolicy: unlessStopped

      - task: Docker@1
        displayName: "Start Test Proxy"
        inputs:
          containerregistrytype: "Container Registry"
          command: "Run an image"
          imageName: aziotbld/testproxy
          containerName: "testproxy-instance"
          ports: "127.0.0.1:8888:8888"
          restartPolicy: unlessStopped

      - powershell: ./vsts/gatedBuild.ps1
        displayName: build
        env:
          IOTHUB_CONN_STRING_CSHARP: $(IOTHUB-CONN-STRING-CSHARP)
          IOTHUB_PFX_X509_THUMBPRINT: $(IOTHUB-PFX-X509-THUMBPRINT)
          IOTHUB_X509_PFX_CERTIFICATE: $(IOTHUB-X509-PFX-CERTIFICATE)
          IOTHUB_EVENTHUB_CONN_STRING_CSHARP: $(IOTHUB-EVENTHUB-CONN-STRING-CSHARP)
          IOTHUB_EVENTHUB_COMPATIBLE_NAME: $(IOTHUB-EVENTHUB-COMPATIBLE-NAME)
          IOTHUB_EVENTHUB_CONSUMER_GROUP: $(IOTHUB-EVENTHUB-CONSUMER-GROUP)
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          DPS_INDIVIDUALX509_PFX_CERTIFICATE: $(DPS-INDIVIDUALX509-PFX-CERTIFICATE)
          DPS_GROUPX509_PFX_CERTIFICATE: $(DPS-GROUPX509-PFX-CERTIFICATE)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_GROUPX509_CERTIFICATE_CHAIN: $(DPS-GROUPX509-CERTIFICATE-CHAIN)
          DPS_TPM_REGISTRATIONID: $(DPS-TPM-REGISTRATIONID)
          DPS_TPM_DEVICEID: $(DPS-TPM-DEVICEID)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          FAR_AWAY_IOTHUB_HOSTNAME: $(FAR-AWAY-IOTHUB-HOSTNAME)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          IOTHUB_PROXY_SERVER_ADDRESS: 127.0.0.1:8888
          LA_AAD_TENANT: $(LA-AAD-TENANT)
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)

      - task: CopyFiles@2
        displayName: "Copy files to the artifacts folder"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)"
          Contents: "**/*.trx"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: testresults_linux"
        inputs:
          ArtifactName: testresults_linux

        condition: always()

      - task: PublishTestResults@2
        displayName: "Publish Test Results **/*.trx"
        inputs:
          testRunner: VSTest
          testRunTitle: "Linux Tests (netcoreapp2.1)"
          testResultsFiles: "**/*.trx"

        condition: always()

  ### Windows build ###
  - job: WINDOWS
    displayName: Windows
    strategy:
      maxParallel: 3
      #maxParallel: 1 Uncomment this to make Windows builds run in serial rather than in parallel
      matrix:
        .Net Core 2.1:
          FRAMEWORK: netcoreapp2.1
        .Net Framework 4.7:
          FRAMEWORK: net47
        .Net Framework 4.5.1:
          FRAMEWORK: net451

    condition: succeeded()
    pool:
      name: Hosted VS2017
      timeoutInMinutes: 180
    steps:
      - script: |
          call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
          sn -Vr *,31bf3856ad364e35

        displayName: "Disable strong name validation"

      - script: |
          choco install -y squid

        displayName: "Install Squid"

      - powershell: ./vsts/start_tpm_windows.ps1
        displayName: "Start TPM Simulator"
        env:
          COMMIT_FROM: $(COMMIT_FROM)

      - powershell: ./vsts/gatedBuild.ps1
        displayName: build
        env:
          IOTHUB_CONN_STRING_CSHARP: $(IOTHUB-CONN-STRING-CSHARP)
          IOTHUB_PFX_X509_THUMBPRINT: $(IOTHUB-PFX-X509-THUMBPRINT)
          IOTHUB_X509_PFX_CERTIFICATE: $(IOTHUB-X509-PFX-CERTIFICATE)
          IOTHUB_EVENTHUB_CONN_STRING_CSHARP: $(IOTHUB-EVENTHUB-CONN-STRING-CSHARP)
          IOTHUB_EVENTHUB_COMPATIBLE_NAME: $(IOTHUB-EVENTHUB-COMPATIBLE-NAME)
          IOTHUB_EVENTHUB_CONSUMER_GROUP: $(IOTHUB-EVENTHUB-CONSUMER-GROUP)
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          DPS_INDIVIDUALX509_PFX_CERTIFICATE: $(DPS-INDIVIDUALX509-PFX-CERTIFICATE)
          DPS_GROUPX509_PFX_CERTIFICATE: $(DPS-GROUPX509-PFX-CERTIFICATE)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_GROUPX509_CERTIFICATE_CHAIN: $(DPS-GROUPX509-CERTIFICATE-CHAIN)
          DPS_TPM_REGISTRATIONID: $(DPS-TPM-REGISTRATIONID)
          DPS_TPM_DEVICEID: $(DPS-TPM-DEVICEID)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          FAR_AWAY_IOTHUB_HOSTNAME: $(FAR-AWAY-IOTHUB-HOSTNAME)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          IOTHUB_PROXY_SERVER_ADDRESS: 127.0.0.1:3128
          LA_AAD_TENANT: $(LA-AAD-TENANT)
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)

      - task: CopyFiles@2
        displayName: "Copy TRX files to the artifacts folder"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)"
          Contents: "**/*.trx"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

        condition: always()

      - task: CopyFiles@2
        displayName: "Copy ETL files to the artifacts folder"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)"
          Contents: "**/*.etl"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: testresults"
        inputs:
          ArtifactName: testresults_windows_$(FRAMEWORK)

        condition: always()

      - task: PublishTestResults@2
        displayName: "Publish Test Results **/*.trx"
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/*.trx"
          testRunTitle: "Windows Tests ($(FRAMEWORK))"
          platform: Windows
          configuration: "Debug UT + Release E2E ($(FRAMEWORK))"

        condition: always()

  ### WINDOWS Analyzers ###
  - job: Analyzers
    displayName: Analyzers

    condition: succeeded()
    pool:
      name: Hosted VS2017
      timeoutInMinutes: 60
    steps:
      - script: |
          rem Run dotnet first experience.
          dotnet new
          rem Start build
          build.cmd -clean -build -configuration Debug -package

        displayName: build

      - task: ComponentGovernanceComponentDetection@0
        displayName: "Component Detection"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
        displayName: "Run MpCmdRun.exe"
        inputs:
          EnableServices: true
          SignatureFreshness: OneDay

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
        displayName: "Run AutoApplicability"
        inputs:
          ExternalRelease: true

          IsSoftware: true

          UsesHSM: true

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
        displayName: "Run BinSkim "
        inputs:
          arguments: 'analyze  $(Build.SourcesDirectory)\Microsoft.Azure.Devices.*.dll $(Build.SourcesDirectory)\DeviceExplorer.exe --recurse --verbose'

        # TODO #181 Config issue: must run on Debug builds only with valid PDBs.
        enabled: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-codemetrics.CodeMetrics@1
        displayName: "Run CodeMetrics "
        inputs:
          Files: '$(Build.SourcesDirectory)\**\DeviceExplorer.exe;$(Build.SourcesDirectory)\**\Microsoft.Azure.Devices.*.dll'

        # TODO #181 Config issue: must run on Debug builds only with valid PDBs.
        enabled: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
        displayName: "Run CredScan"
        inputs:
          suppressionsFile: vsts/CredScanSuppressions.json
          regexMatchTimeoutInSeconds: 5

          # TODO #181 Samples / tests fail the test due to fake connection strings.
          debugMode: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
        displayName: "Run PoliCheck"
        inputs:
          targetType: F

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
        displayName: "Run Vulnerability Assessment"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
        displayName: "Publish Security Analysis Logs"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
        displayName: "Create Security Analysis Report"
        inputs:
          AllTools: true

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
        displayName: "TSA upload"
        inputs:
          tsaVersion: TsaV2
          tsaStamp: Azure
          codeBaseName: "Azure-Iot-SDK-CSharp-Master"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
        displayName: "Post Analysis"
        inputs:
          AllTools: true

        # TODO #181 Enable post analysis to break builds after all above items are enabled.
        enabled: false

  # END: SDL and Compliance tasks #

  - job: NETMF
    displayName: NetMF
    condition: succeeded()
    pool:
      name: win
      timeoutInMinutes: 1
    steps:
      - script: |
          call "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\Common7\\Tools\\VsDevCmd.bat"
          vsts/windows_csharp_mf.cmd

        displayName: build

  - job: DEVEXP
    displayName: Device Explorer
    pool:
      name: win
      timeoutInMinutes: 5

    steps:
      - script: |
          call "C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Enterprise\\Common7\\Tools\\VsDevCmd.bat"
          vsts/windows_csharp_deviceexplorer.cmd
        displayName: build

      # BEGIN: SDL and Compliance tasks #

      - task: ComponentGovernanceComponentDetection@0
        displayName: "Component Detection"

        # TODO #181 CD component bugs currently investigated by the owning team.
        enabled: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
        displayName: "Run MpCmdRun.exe"
        inputs:
          EnableServices: true

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
        displayName: "Run AutoApplicability"
        inputs:
          ExternalRelease: true
          IsSoftware: true
          UsesHSM: true

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
        displayName: "Run BinSkim "
        inputs:
          arguments: 'analyze  $(Build.SourcesDirectory)\Microsoft.Azure.Devices.*.dll $(Build.SourcesDirectory)\DeviceExplorer.exe --recurse --verbose'

        # TODO #181 Config issue: must run on Debug builds only with valid PDBs.
        enabled: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-codemetrics.CodeMetrics@1
        displayName: "Run CodeMetrics "
        inputs:
          Files: '$(Build.SourcesDirectory)\**\DeviceExplorer.exe;$(Build.SourcesDirectory)\**\Microsoft.Azure.Devices.*.dll'

        # TODO #181 Config issue: must run on Debug builds only with valid PDBs.
        enabled: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
        displayName: "Run CredScan"
        inputs:
          suppressionsFile: vsts/CredScanSuppressions.json
          regexMatchTimeoutInSeconds: 5

          # TODO #181 Samples / tests fail the test due to fake connection strings.
          debugMode: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
        displayName: "Run PoliCheck"
        inputs:
          targetType: F

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
        displayName: "Run Vulnerability Assessment"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
        displayName: "Publish Security Analysis Logs"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
        displayName: "Create Security Analysis Report"
        inputs:
          AllTools: true

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
        displayName: "TSA upload"
        inputs:
          tsaVersion: TsaV2
          tsaStamp: Azure
          codeBaseName: "Azure-Iot-SDK-CSharp-Master"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
        displayName: "Post Analysis"
        inputs:
          AllTools: true

        # TODO #181 Enable post analysis to break builds after all above items are enabled.
        enabled: false
# END: SDL and Compliance tasks #
