name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

# https://docs.microsoft.com/azure/devops/pipelines/process/runtime-parameters
parameters:
- name: maxParallelJobs
  displayName: Maximum jobs to run in parallel. Change maxParallel to 1 make builds run in serial rather than in parallel.
  type: number
  # Reasonable target to avoid throttling and contention with several PRs running.
  default: 4
- name: jobTimeoutInMinutes
  displayName: Timeout for each job
  type: number
  default: 75
- name: testTargets
  displayName: The .NET test targets to build and run. 'all' and 'pr-build' (net6.0, netcoreapp3.1) are aggregates of the remaining values.
  type: string
  values:
    - all
    - pr-build
    - net6.0
    - net5.0
    - netcoreapp3.1
    - netcoreapp2.1
    - net4.7.2
    - net4.5.1
  default: 'all'

variables:
  ${{ or(eq(variables['Build.Reason'], 'PullRequest'), contains(parameters['testTargets'], 'pr-build')) }}:
  isPR: true

  ${{ contains(parameters['testTargets'], 'all') }}:
  allTestTargets: true

  ${{ if or(eq(variables['allTestTargets'], true), eq(variables['isPR'], true)) }}:
  pri1: true

  ${{ if or(eq(variables['pri1'], 'true'), contains(parameters['testTargets'], 'net6.0')) }}:
  testNet60: true

  ${{ if or(eq(variables['pri1'], 'true'), contains(parameters['testTargets'], 'netcoreapp3.1')) }}:
  testNetcoreapp31: true

  ${{ if or(eq(variables['allTestTargets'], true), contains(parameters['testTargets'], 'net5.0')) }}:
  testNet50: true

  ${{ if or(eq(variables['allTestTargets'], true), contains(parameters['testTargets'], 'netcoreapp2.1')) }}:
  testNetcoreapp21: true

  ${{ if or(eq(variables['allTestTargets'], true), contains(parameters['testTargets'], 'net4.7.2')) }}:
  testNet472: true

  ${{ if or(eq(variables['allTestTargets'], true), contains(parameters['testTargets'], 'net4.5.1')) }}:
  testNet451: true

trigger:
  batch: true
  branches:
    include:
    - main
  paths:
    exclude:
    - docs/*
    - tools/CaptureLogs/*
    - iothub/device/devdoc/*
    - iothub/service/devdoc/*

resources:
  - repo: self
    clean: true

jobs:
  ### Linux build ###
  - job: LINUX
    displayName: Linux
    timeoutInMinutes: ${{ parameters.jobTimeoutInMinutes }}
    strategy:
      maxParallel: ${{ parameters.maxParallelJobs }}
      matrix:
        ${{ if eq('variables['testNet60']', 'true') }}:
          .NET6.0:
            FRAMEWORK: net6.0
        ${{ if eq('variables['testNet50']', 'true') }}:
          .NET5.0:
            FRAMEWORK: net5.0
        ${{ if eq('variables['testNetcoreapp31']', 'true') }}:
          .NETCoreApp3.1:
            FRAMEWORK: netcoreapp3.1
        ${{ if eq('variables['testNetcoreapp21']', 'true') }}:
          .NETCoreApp2.1.30:
            FRAMEWORK: netcoreapp2.1.30

    condition: succeeded()
    pool:
      # If this is changed, don't forget to update supported_platforms.md in the root directory. That document outlines what OS we test on and should stay up to date.
      vmImage: ubuntu-20.04
    steps:
      - task: PowerShell@2
        displayName: 'Print vars'
        inputs:
          targetType: inline
          script: |
            Write-Host "max parallel 1: ${{ parameters.maxParallelJobs }}"
            Write-Host "max parallel 2: $parameters['maxParallelJobs']"

      # https://docs.microsoft.com/azure/devops/pipelines/tasks/tool/dotnet-core-tool-installer?view=azure-devops

      - ${{ if eq(variables['testNet60'], true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK 6.0'
          inputs:
           packageType: sdk
           version: 6.x
           performMultiLevelLookup: true
           installationPath: $(Agent.ToolsDirectory)/dotnet

      - ${{ if eq(variables['testNet50'], true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK 5.0'
          inputs:
            packageType: sdk
            version: 5.x
            performMultiLevelLookup: true
            installationPath: $(Agent.ToolsDirectory)/dotnet

      - ${{ if eq(variables['testNetcoreapp31'], true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 3.1'
          inputs:
            packageType: sdk
            version: 3.1.x
            performMultiLevelLookup: true
            installationPath: $(Agent.ToolsDirectory)/dotnet

      - ${{ if eq(variables['testNetcoreapp21'], true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 2.1'
          inputs:
            packageType: sdk
            version: 2.1.x
            performMultiLevelLookup: true
            installationPath: $(Agent.ToolsDirectory)/dotnet

      - task: Docker@1
        displayName: "Start TPM Simulator"
        inputs:
          containerregistrytype: "Container Registry"
          command: "Run an image"
          imageName: aziotbld/testtpm
          containerName: "testtpm-instance"

          ports: |
            127.0.0.1:2321:2321
            127.0.0.1:2322:2322

          restartPolicy: unlessStopped

      - task: Docker@1
        displayName: "Start Test Proxy"
        inputs:
          containerregistrytype: "Container Registry"
          command: "Run an image"
          imageName: aziotbld/testproxy
          containerName: "testproxy-instance"
          ports: "127.0.0.1:8888:8888"
          restartPolicy: unlessStopped

      - powershell: ./vsts/gatedBuild.ps1
        displayName: build
        env:
          # Environment variables for IoT Hub E2E tests
          IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
          IOTHUB_X509_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-DEVICE-PFX-CERTIFICATE)
          IOTHUB_X509_CHAIN_DEVICE_NAME: $(IOTHUB-X509-CHAIN-DEVICE-NAME)
          IOTHUB_X509_CHAIN_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-CHAIN-DEVICE-PFX-CERTIFICATE)
          IOTHUB_USER_ASSIGNED_MSI_RESOURCE_ID: $(IOTHUB-USER-ASSIGNED-MSI-RESOURCE-ID)

          # Environment variables for DPS E2E tests
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          FAR_AWAY_IOTHUB_HOSTNAME: $(FAR-AWAY-IOTHUB-HOSTNAME)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_X509_GROUP_ENROLLMENT_NAME: $(DPS-X509-GROUP-ENROLLMENT-NAME)

          # Environment variables for Azure resources used for E2E tests (common)
          X509_CHAIN_ROOT_CA_CERTIFICATE: $(X509-CHAIN-ROOT-CA-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE1_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE1-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_PFX_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-PFX-CERTIFICATE)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          MSFT_TENANT_ID: $(MSFT-TENANT-ID)
          E2E_TEST_AAD_APP_CLIENT_ID: $(E2E-TEST-AAD-APP-CLIENT-ID)
          E2E_TEST_AAD_APP_CLIENT_SECRET: $(E2E-TEST-AAD-APP-CLIENT-SECRET)
          E2E_IKEY: $(E2E-IKEY)

          # Environment variables for the DevOps pipeline
          PROXY_SERVER_ADDRESS: 127.0.0.1:8888
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)

          # Environment variables for invalid certificate tests
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)

          # Environment variables used by Log Analytics Workspace for Azure Security Center
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)

      - task: CopyFiles@2
        displayName: "Copy files to the artifacts folder"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)"
          Contents: "**/*.trx"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: testresults_linux_$(FRAMEWORK)"
        inputs:
          ArtifactName: testresults_linux_$(FRAMEWORK)

        condition: always()

      - task: PublishTestResults@2
        displayName: "Publish Test Results **/*.trx"
        inputs:
          testRunner: VSTest
          testRunTitle: "Linux Tests ($(FRAMEWORK)) (Attempt $(System.JobAttempt))"
          testResultsFiles: "**/*.trx"

        condition: always()
        
      - task: ComponentGovernanceComponentDetection@0
        displayName: Component Governance Detection
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          alertWarningLevel: 'Low' # The task will present a warning, but will not cause the build to fail
        condition: always()

  ### Windows build ###
  - job: WINDOWS
    displayName: Windows
    timeoutInMinutes: ${{ parameters.jobTimeoutInMinutes }}
    strategy:
      maxParallel: ${{ parameters.maxParallelJobs }}
      matrix:
        ${{ if eq('variables['testNet60']', 'true') }}:
          .NET6.0:
            FRAMEWORK: net6.0
        ${{ if eq('variables['testNet50']', 'true') }}:
          .NET5.0:
            FRAMEWORK: net5.0
        ${{ if eq('variables['testNetcoreapp31']', 'true') }}:
          .NETCoreApp3.1:
            FRAMEWORK: netcoreapp3.1
        ${{ if eq('variables['testNetcoreapp21']', 'true') }}:
          .NETCoreApp2.1.30:
            FRAMEWORK: netcoreapp2.1.30
        ${{ if eq('variables['testNet472']', 'true') }}:
          .NET4.7.2:
            FRAMEWORK: net4.7.2
        ${{ if eq('variables['testNet451']', 'true') }}:
          .NET451:
            FRAMEWORK: net4.5.1

    condition: succeeded()
    pool:
      # If this is changed, don't forget to update supported_platforms.md in the root directory. That document outlines what OS we test on and should stay up to date.
      vmImage: windows-2022
    steps:
      - ${{ if eq(variables['testNet60'], true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK 6.0'
          inputs:
            packageType: sdk
            version: 6.x
            performMultiLevelLookup: true
            installationPath: $(Agent.ToolsDirectory)/dotnet

      - ${{ if eq(variables['testNet50'], true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET SDK 5.0'
          inputs:
            packageType: sdk
            version: 5.x
            performMultiLevelLookup: true
            installationPath: $(Agent.ToolsDirectory)/dotnet

      - ${{ if eq(variables['testNetcoreapp31'], true) }}:
        - task: UseDotNet@2
          displayName: 'Use .NET Core SDK 3.1'
          inputs:
            packageType: sdk
            version: 3.1.x
            performMultiLevelLookup: true
            installationPath: $(Agent.ToolsDirectory)/dotnet

      - ${{ if eq(variables['testNetcoreapp21'], true) }}:
        - task: CmdLine@2
          displayName: 'Install .NET Core 2.1'
          inputs:
            script: 'choco install dotnetcore-2.1-sdk'

      - ${{ if eq(variables['testNet472'], true) }}:
        - task: CmdLine@2
          displayName: 'Install .NET 4.7.2'
          inputs:
            script: 'choco install netfx-4.7.2-devpack'

      - ${{ if eq(variables['testNet451'], true) }}:
        - task: CmdLine@2
          displayName: 'Install .NET 4.5.1'
          inputs:
            script: 'choco install dotnet4.5.1'

      - script: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          sn.exe -Vr *,31bf3856ad364e35

        displayName: "Disable strong name validation"

      - script: |
          choco install -y squid

        displayName: "Install Squid"

      - powershell: ./vsts/start_tpm_windows.ps1
        displayName: "Start TPM Simulator"

      - powershell: ./vsts/gatedBuild.ps1
        displayName: build
        env:
          # Environment variables for IoT Hub E2E tests
          IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
          IOTHUB_X509_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-DEVICE-PFX-CERTIFICATE)
          IOTHUB_X509_CHAIN_DEVICE_NAME: $(IOTHUB-X509-CHAIN-DEVICE-NAME)
          IOTHUB_X509_CHAIN_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-CHAIN-DEVICE-PFX-CERTIFICATE)
          IOTHUB_USER_ASSIGNED_MSI_RESOURCE_ID: $(IOTHUB-USER-ASSIGNED-MSI-RESOURCE-ID)

          # Environment variables for DPS E2E tests
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          FAR_AWAY_IOTHUB_HOSTNAME: $(FAR-AWAY-IOTHUB-HOSTNAME)
          CUSTOM_ALLOCATION_POLICY_WEBHOOK: $(CUSTOM-ALLOCATION-POLICY-WEBHOOK)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_X509_GROUP_ENROLLMENT_NAME: $(DPS-X509-GROUP-ENROLLMENT-NAME)

          # Environment variables for Azure resources used for E2E tests (common)
          X509_CHAIN_ROOT_CA_CERTIFICATE: $(X509-CHAIN-ROOT-CA-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE1_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE1-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_PFX_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-PFX-CERTIFICATE)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          MSFT_TENANT_ID: $(MSFT-TENANT-ID)
          E2E_TEST_AAD_APP_CLIENT_ID: $(E2E-TEST-AAD-APP-CLIENT-ID)
          E2E_TEST_AAD_APP_CLIENT_SECRET: $(E2E-TEST-AAD-APP-CLIENT-SECRET)
          E2E_IKEY: $(E2E-IKEY)

          # Environment variables for the DevOps pipeline
          PROXY_SERVER_ADDRESS: 127.0.0.1:3128
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)

          # Environment variables for invalid certificate tests
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)

          # Environment variables used by Log Analytics Workspace for Azure Security Center
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)

      - task: CopyFiles@2
        displayName: "Copy TRX files to the artifacts folder"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)"
          Contents: "**/*.trx"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

        condition: always()

      - task: CopyFiles@2
        displayName: "Copy ETL files to the artifacts folder"
        inputs:
          SourceFolder: "$(Build.SourcesDirectory)"
          Contents: "**/*.etl"
          TargetFolder: "$(Build.ArtifactStagingDirectory)"

        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: "Publish Artifact: testresults"
        inputs:
          ArtifactName: testresults_windows_$(FRAMEWORK)

        condition: always()

      - task: PublishTestResults@2
        displayName: "Publish Test Results **/*.trx"
        inputs:
          testRunner: VSTest
          testResultsFiles: "**/*.trx"
          testRunTitle: "Windows Tests ($(FRAMEWORK)) (Attempt $(System.JobAttempt))"
          platform: Windows
          configuration: "Debug UT + Release E2E ($(FRAMEWORK))"

        condition: always()
        
      - task: ComponentGovernanceComponentDetection@0
        displayName: Component Governance Detection
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          alertWarningLevel: 'Low' # The task will present a warning, but will not cause the build to fail
        condition: always()

  ### .Net SDL Analyzers ###
  - job: DOTNet_SDL_Analyzers
    displayName: .Net SDL Analyzers
    timeoutInMinutes: 60

    condition: succeeded()
    pool:
      vmImage: windows-2022
    steps:
      - script: |
          rem Run dotnet first experience.
          dotnet new
          rem Start build
          build.cmd -clean -build -configuration Debug -package

        displayName: build

      - task: ComponentGovernanceComponentDetection@0
        displayName: "Component Detection"
      
      - task: securedevelopmentteam.vss-secure-development-tools.build-task-policheck.PoliCheck@1
        displayName: "Run PoliCheck"
        inputs:
          targetType: F
          optionsRulesDBPath: 'vsts/PolicheckExclusionsDB.mdb'
          optionsSEV: '1|2|3|4'
          optionsPE: 1
      
      - task: securedevelopmentteam.vss-secure-development-tools.build-task-antimalware.AntiMalware@3
        displayName: "Run MpCmdRun.exe"
        inputs:
          EnableServices: true
          SignatureFreshness: OneDay
          # Signature refreshes on Hosted Agents can sometimes have a delay of a day or two.
          # The support team already has a process to address this, so our pipeline can treat stale signatures as warnings (instead of treating it as an error).
          TreatStaleSignatureAs: Warning

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-autoapplicability.AutoApplicability@1
        displayName: "Run AutoApplicability"
        inputs:
          ExternalRelease: true

          IsSoftware: true

          UsesHSM: true

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-binskim.BinSkim@3
        displayName: "Run BinSkim"
        inputs:
          arguments: 'analyze  $(Build.SourcesDirectory)\Microsoft.Azure.Devices.*.dll --recurse --verbose'

        # TODO #181 Config issue: must run on Debug builds only with valid PDBs.
        enabled: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-codemetrics.CodeMetrics@1
        displayName: "Run CodeMetrics"
        inputs:
          Files: '$(Build.SourcesDirectory)\**\Microsoft.Azure.Devices.*.dll'

        # TODO #181 Config issue: must run on Debug builds only with valid PDBs.
        enabled: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
        displayName: "Run CredScan"
        inputs:
          toolMajorVersion: V2
          suppressionsFile: vsts/CredScanSuppressions.json
          regexMatchTimeoutInSeconds: 5

          # TODO #181 Samples / tests fail the test due to fake connection strings.
          debugMode: false

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-vulnerabilityassessment.VulnerabilityAssessment@0
        displayName: "Run Vulnerability Assessment"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
        displayName: "Publish Security Analysis Logs"

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
        displayName: "Create Security Analysis Report"
        inputs:
          AllTools: true
          
      - task: ComponentGovernanceComponentDetection@0
        displayName: Component Governance Detection
        inputs:
          scanType: 'Register'
          verbosity: 'Verbose'
          alertWarningLevel: 'Low' # The task will present a warning, but will not cause the build to fail
        condition: always()

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-uploadtotsa.TSAUpload@1
        displayName: "TSA upload"
        inputs:
          tsaVersion: 'TsaV2'
          codebase: 'NewOrUpdate'
          tsaEnvironment: 'PROD'
          codeBaseName: 'Azure-Iot-SDK-CSharp-Master'
          notificationAlias: 'AzIoTDnDMgdSdk@microsoft.com'
          notifyAlwaysV2: false
          instanceUrlForTsaV2: 'MSAZURE'
          projectNameMSAZURE: 'One'
          areaPath: 'One\IoT\Platform and Devices\IoT Devices\SDKs\Managed'
          iterationPath: 'One\Custom\IoT\Backlog'

      - task: securedevelopmentteam.vss-secure-development-tools.build-task-postanalysis.PostAnalysis@1
        displayName: "Post Analysis"
        inputs:
          AllTools: true

        # TODO #181 Enable post analysis to break builds after all above items are enabled.
        enabled: false

# END: SDL and Compliance tasks #
