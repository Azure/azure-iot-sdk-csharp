name: $(BuildID)_$(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

parameters:
- name: maxParallelJobs
  displayName: Maximum jobs to run in parallel. Change maxParallel to 1 make OS builds run in serial rather than in parallel.
  type: number
  # Reasonable target to avoid throttling and contention with several PRs running.
  default: 3

resources:
  - repo: self
    clean: true

jobs:
  
  ### Build nuget packages ###
  - job: Build_Packages
    displayName: Build Nuget Packages
    timeoutInMinutes: 15

    condition: succeeded()
    pool:
      vmImage: windows-2022

    steps:

      - task: PowerShell@2
        displayName: 'Build Packages'
        name: BUILD_PKG
        inputs:
          targetType: 'inline'
          script: |
            $env:FILE_DATE = get-date -f yyyy-MM-dd-hh-mm-ss.f
            Set-Content -Path "$(Build.ArtifactStagingDirectory)/partner-file-path.txt" -Value "azure-iot-sdk/net/pkgs_$env:FILE_DATE"
            Write-Host Package Folder will be appended with date suffix: $env:FILE_DATE
            Write-Host "##vso[task.setvariable variable=NUGET_PKG_DATE;isoutput=true;]$env:FILE_DATE"
            Write-Host Start building release package with $(Agent.Id):$(Agent.MachineName) on $env:FILE_DATE
            $(Build.SourcesDirectory)/build.ps1 -build -clean -configuration Release -package

      - task: CopyFiles@2
        displayName: 'Copy nuget package files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)/bin/pkg'
          Contents: '**/*.*nupkg'
          TargetFolder: '$(Build.ArtifactStagingDirectory)/nuget'
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish: Unsigned nuget packages'
        inputs:
          ArtifactName: unsigned_nuget_packages
        condition: always()

  ### Windows Tests ###
  - job: Windows_Tests
    displayName: Windows Tests
    timeoutInMinutes: 180

    strategy:
      maxParallel: ${{ parameters.maxParallelJobs }}
      matrix:
        .Net 6.0:
          FRAMEWORK: net6.0
        .Net 5.0:
          FRAMEWORK: net5.0
        .Net Core 3.1:
          FRAMEWORK: netcoreapp3.1
        .Net Core 2.1.30:
          FRAMEWORK: netcoreapp2.1.30
        .Net Framwork 4.7.2:
          FRAMEWORK: net472
        .Net Framework 4.5.1:
          FRAMEWORK: net451

    condition: and(succeeded(), ne(variables.runTests, 'false'))
    dependsOn: Build_Packages
    pool:
      vmImage: windows-2022
    
    variables:
      NUGET_PACKGE_FOLDER: $[ dependencies.Build_Packages.outputs['BUILD_PKG.NUGET_PKG_DATE'] ]

    steps:

      - task: DownloadPipelineArtifact@2
        displayName: 'Download nuget packages from pipeline artifacts'
        inputs:
          buildType: 'current'
          artifactName: 'unsigned_nuget_packages'
          itemPattern: '**/*.*nupkg'
          targetPath: '$(Build.SourcesDirectory)/bin'
            
      - task: PowerShell@2
        displayName: 'Downloaded nuget package files checkpoint'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Download contents:"
            gci -Path $(Build.SourcesDirectory)/bin/nuget -Recurse -Force

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 6.x'
        inputs:
          packageType: sdk
          version: 6.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 5.x'
        inputs:
          packageType: sdk
          version: 5.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 3.x'
        inputs:
          packageType: sdk
          version: 3.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET core SDK 2.x'
        inputs:
          packageType: sdk
          version: 2.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net
 
#      - script: |
#          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
#          sn -Vr *,31bf3856ad364e35
#        displayName: 'Disable strong name validation'

      - script: |
          choco install -y squid
        displayName: 'Setup Proxy (Squid)'

      - task: PowerShell@2
        displayName: 'Setup TPM Simulator (EXE)'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host Start TPM Simulator
            Start $(Build.SourcesDirectory)\vsts\TpmSimulator\Simulator.exe

      - powershell: ./vsts/releaseTest.ps1
        displayName: 'E2E Tests'
        env:
          # Environment variables for IoT Hub E2E tests
          IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
          IOTHUB_X509_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-DEVICE-PFX-CERTIFICATE)
          IOTHUB_X509_CHAIN_DEVICE_NAME: $(IOTHUB-X509-CHAIN-DEVICE-NAME)
          IOTHUB_X509_CHAIN_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-CHAIN-DEVICE-PFX-CERTIFICATE)
          IOTHUB_USER_ASSIGNED_MSI_RESOURCE_ID: $(IOTHUB-USER-ASSIGNED-MSI-RESOURCE-ID)
          # Environment variables for DPS E2E tests
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_X509_GROUP_ENROLLMENT_NAME: $(DPS-X509-GROUP-ENROLLMENT-NAME)
          # Environment variables for Azure resources used for E2E tests (common)
          X509_CHAIN_ROOT_CA_CERTIFICATE: $(X509-CHAIN-ROOT-CA-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE1_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE1-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_PFX_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-PFX-CERTIFICATE)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          MSFT_TENANT_ID: $(MSFT-TENANT-ID)
          E2E_IKEY: $(E2E-IKEY)
          E2E_TEST_AAD_APP_CLIENT_ID: $(E2E-TEST-AAD-APP-CLIENT-ID)
          E2E_TEST_AAD_APP_CLIENT_SECRET: $(E2E-TEST-AAD-APP-CLIENT-SECRET)
          # Environment variables for the DevOps pipeline
          PROXY_SERVER_ADDRESS: 127.0.0.1:3128
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)
          AZURE_IOT_LOCALPACKAGES: $(Build.SourcesDirectory)/bin/nuget
          # Environment variables for invalid certificate tests
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          # Environment variables used by Log Analytics Workspace for Azure Security Center
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)

      - task: CopyFiles@2
        displayName: 'Copy TRX files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.trx'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()

      - task: CopyFiles@2
        displayName: 'Copy ETL files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.etl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Windows Test Artifacts: $(FRAMEWORK)'
        inputs:
          ArtifactName: testresults_windows_$(FRAMEWORK)
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish Windows Test Results: $(FRAMEWORK)'
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          testRunTitle: "Windows Tests ($(FRAMEWORK)) (Attempt $(System.JobAttempt))"
          platform: Windows
          configuration: 'Debug UT + Release E2E ($(FRAMEWORK))'
        condition: always()

  ### Linux Tests ###
  - job: Linux_Tests
    displayName: Linux Tests
    timeoutInMinutes: 180

    strategy:
      maxParallel: ${{ parameters.maxParallelJobs }}
      matrix:
        .Net 6.0:
          FRAMEWORK: net6.0
        .Net 5.0:
          FRAMEWORK: net5.0
        .Net Core 3.1:
          FRAMEWORK: netcoreapp3.1
        .Net Core 2.1.30:
          FRAMEWORK: netcoreapp2.1.30

    condition: and(succeeded(), ne(variables.runTests, 'false'))
    dependsOn: Build_Packages
    pool:
      vmImage: ubuntu-20.04
    
    variables:
      NUGET_PACKGE_FOLDER: $[ dependencies.Build_Packages.outputs['BUILD_PKG.NUGET_PKG_DATE'] ]

    steps:
      - task: DownloadPipelineArtifact@2
        displayName: 'Download nuget packages from pipeline artifacts'
        inputs:
          buildType: 'current'
          artifactName: 'unsigned_nuget_packages'
          itemPattern: '**/*.*nupkg'
          targetPath: '$(Build.SourcesDirectory)/bin'

      - task: Bash@3
        displayName: 'Downloaded nuget package files checkpoint'
        inputs:
          targetType: 'inline'
          script: |
            echo "Download contents:"
            ls -alR $(Build.SourcesDirectory)/bin/nuget

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 6.x'
        inputs:
          packageType: sdk
          version: 6.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET SDK 5.x'
        inputs:
          packageType: sdk
          version: 5.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 3.x'
        inputs:
          packageType: sdk
          version: 3.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net

      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 2.x'
        inputs:
          packageType: sdk
          version: 2.1.x
          performMultiLevelLookup: true
          installationPath: $(Agent.ToolsDirectory)/net
  
      - task: Docker@2
        displayName: "Login to ACR"
        inputs:
          command: "login"
          containerRegistry: "Azure IoT ACR"

      - task: PowerShell@2
        displayName: 'Cert Validation - Setup Certificate Proxy'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "============"
            Write-Host "check docker"
            Write-Host "============"
            docker images
            docker ps -a
            gci -Path $(Build.SourcesDirectory)/e2e/test/docker -Recurse -Force -Name
            Write-Host "==========================="
            Write-Host "uncompress self-signed cert"
            Write-Host "==========================="
            gzip -d -N -S ".bin" $(Build.SourcesDirectory)/e2e/test/docker/haproxy/haproxy.bin
            gci -Path $(Build.SourcesDirectory)/e2e/test/docker -Recurse -Force -Name
            Write-Host "====================="
            Write-Host "Docker run containers"
            Write-Host "====================="
            docker run -h invalidcertgde1.westus.cloudapp.azure.com --name invalid-gde --expose=443 --expose=5671 --expose=8883 -v $(Build.SourcesDirectory)/e2e/test/docker/haproxy:/usr/local/etc/haproxy:ro -d aziotacr.azurecr.io/haproxy haproxy -f /usr/local/etc/haproxy/haproxygde.cfg
            docker run -h invalidcertdps1.westus.cloudapp.azure.com --name invalid-dps --expose=443 --expose=5671 --expose=8883 -v $(Build.SourcesDirectory)/e2e/test/docker/haproxy:/usr/local/etc/haproxy:ro -d aziotacr.azurecr.io/haproxy haproxy -f /usr/local/etc/haproxy/haproxydps.cfg
            docker run -h invalidcertiothub1.westus.cloudapp.azure.com --name invalid-hub --expose=443 --expose=5671 --expose=8883 -v $(Build.SourcesDirectory)/e2e/test/docker/haproxy:/usr/local/etc/haproxy:ro -d aziotacr.azurecr.io/haproxy haproxy -f /usr/local/etc/haproxy/haproxyhub.cfg
            docker ps -a

      - task: Bash@3
        displayName: 'Cert Validation - Setup local hostname'
        name: CVTEST_NET
        inputs:
          targetType: 'inline'
          script: |
            echo "==============="
            echo "Inspect network"
            echo "==============="
            ip -4 addr
            export CVTEST_HOST_IP=$(ip -4 addr show eth0 | grep -Po 'inet \K[\d.]+')
            export CVTEST_HOST_NETWORK=$(ip -4 addr show eth0 | grep -Po 'inet \K[\d.]+/*\d.')
            export CVTEST_HOST_SUBNET=$(ip -4 addr show eth0 | grep -Po 'inet \K[\d.]+' | grep -Po '[\d]{1,3}.[\d]{1,3}.[\d]{1,3}')
            export CVTEST_HOST_SUBNET_MASK=$(ip -4 addr show eth0 | grep -Po 'inet \K[\d.]+/*\d.' | grep -Po '/[\d]{1,2}')
            export CVTEST_CONTAINER_IP=$(ip -4 addr show docker0 | grep -Po 'inet \K[\d.]+')
            echo "HOST=$CVTEST_HOST_IP"
            echo "HOST NETWORK=$CVTEST_HOST_NETWORK"
            echo "HOST SUBNET=$CVTEST_HOST_SUBNET"
            echo "HOST SUBNET MASK=$CVTEST_HOST_SUBNET_MASK"
            echo "CONTAINER=$CVTEST_CONTAINER_IP"
            #echo "##vso[task.setvariable variable=AGENT_HOST;isoutput=true;]$CVTEST_HOST_IP"
            #echo "##vso[task.setvariable variable=AGENT_NETWORK;isoutput=true;]$CVTEST_HOST_NETWORK"
            #echo "##vso[task.setvariable variable=AGENT_SUBNET;isoutput=true;]$CVTEST_HOST_SUBNET"
            #echo "##vso[task.setvariable variable=AGENT_SUBNET_MASK;isoutput=true;]$CVTEST_HOST_SUBNET_MASK"
            #echo "##vso[task.setvariable variable=AGENT_CONTAINER;isoutput=true;]$CVTEST_CONTAINER_IP"
            export CVTEST_GDE_IP=$(docker inspect invalid-gde | grep -Po -m 1 '"IPAddress": "\K[\d.]+')
            export CVTEST_DPS_IP=$(docker inspect invalid-dps | grep -Po -m 1 '"IPAddress": "\K[\d.]+')
            export CVTEST_HUB_IP=$(docker inspect invalid-hub | grep -Po -m 1 '"IPAddress": "\K[\d.]+')
            echo "invalid-gde=$CVTEST_GDE_IP"
            echo "invalid-dps=$CVTEST_DPS_IP"
            echo "invalid-hub=$CVTEST_HUB_IP"
            #echo "##vso[task.setvariable variable=AGENT_GDE_IP;isoutput=true;]$CVTEST_GDE_IP"
            #echo "##vso[task.setvariable variable=AGENT_DPS_IP;isoutput=true;]$CVTEST_DPS_IP"
            #echo "##vso[task.setvariable variable=AGENT_HUB_IP;isoutput=true;]$CVTEST_HUB_IP"
            echo "================="
            echo "Update hosts file"
            echo "================="
            sudo bash -c 'mv /etc/hosts /etc/hosts.org'
            sudo bash -c 'cp /etc/hosts.org /etc/hosts'
            echo "$CVTEST_GDE_IP invalidcertgde1.westus.cloudapp.azure.com"
            echo "$CVTEST_DPS_IP invalidcertdps1.westus.cloudapp.azure.com"
            echo "$CVTEST_HUB_IP invalidcertiothub1.westus.cloudapp.azure.com"
            echo "" >> /tmp/hosts.cvtest
            echo "# Local host for invalid cert test" >> /tmp/hosts.cvtest
            echo "$CVTEST_GDE_IP invalidcertgde1.westus.cloudapp.azure.com" >> /tmp/hosts.cvtest
            echo "$CVTEST_DPS_IP invalidcertdps1.westus.cloudapp.azure.com" >> /tmp/hosts.cvtest
            echo "$CVTEST_HUB_IP invalidcertiothub1.westus.cloudapp.azure.com" >> /tmp/hosts.cvtest
            sudo bash -c 'cat /tmp/hosts.cvtest >> /etc/hosts'
            cat /etc/hosts
            echo "====================="
            echo "Ping containers (URL)"
            echo "====================="
            docker ps -a
            route
            ping -c 2 invalidcertgde1.westus.cloudapp.azure.com
            ping -c 2 invalidcertdps1.westus.cloudapp.azure.com
            ping -c 2 invalidcertiothub1.westus.cloudapp.azure.com

      - task: Docker@1
        displayName: "Start TPM Simulator"
        inputs:
          containerregistrytype: "Container Registry"
          command: "Run an image"
          azureContainerRegistry: aziotacr.azurecr.io
          imageName: aziotacr.azurecr.io/aziotbld/testtpm
          containerName: "testtpm-instance"
          ports: |
            127.0.0.1:2321:2321
            127.0.0.1:2322:2322
          restartPolicy: unlessStopped

      - task: Docker@1
        displayName: 'Start Test Proxy'
        inputs:
          containerregistrytype: 'Container Registry'
          command: 'Run an image'
          azureContainerRegistry: aziotacr.azurecr.io
          imageName: aziotacr.azurecr.io/aziotbld/testproxy
          containerName: 'testproxy-instance'
          ports: '127.0.0.1:8888:8888'
          restartPolicy: unlessStopped

      - powershell: ./vsts/releaseTest.ps1
        displayName: 'E2E Tests'
        env:
          # Environment variables for IoT Hub E2E tests
          IOTHUB_CONNECTION_STRING: $(IOTHUB-CONNECTION-STRING)
          IOTHUB_X509_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-DEVICE-PFX-CERTIFICATE)
          IOTHUB_X509_CHAIN_DEVICE_NAME: $(IOTHUB-X509-CHAIN-DEVICE-NAME)
          IOTHUB_X509_CHAIN_DEVICE_PFX_CERTIFICATE: $(IOTHUB-X509-CHAIN-DEVICE-PFX-CERTIFICATE)
          IOTHUB_USER_ASSIGNED_MSI_RESOURCE_ID: $(IOTHUB-USER-ASSIGNED-MSI-RESOURCE-ID)
          # Environment variables for DPS E2E tests
          DPS_IDSCOPE: $(DPS-IDSCOPE)
          PROVISIONING_CONNECTION_STRING: $(PROVISIONING-CONNECTION-STRING)
          DPS_GLOBALDEVICEENDPOINT: $(DPS-GLOBALDEVICEENDPOINT)
          DPS_X509_PFX_CERTIFICATE_PASSWORD: $(DPS-X509-PFX-CERTIFICATE-PASSWORD)
          DPS_X509_GROUP_ENROLLMENT_NAME: $(DPS-X509-GROUP-ENROLLMENT-NAME)
          # Environment variables for Azure resources used for E2E tests (common)
          X509_CHAIN_ROOT_CA_CERTIFICATE: $(X509-CHAIN-ROOT-CA-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE1_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE1-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-CERTIFICATE)
          X509_CHAIN_INTERMEDIATE2_PFX_CERTIFICATE: $(X509-CHAIN-INTERMEDIATE2-PFX-CERTIFICATE)
          STORAGE_ACCOUNT_CONNECTION_STRING: $(STORAGE-ACCOUNT-CONNECTION-STRING)
          MSFT_TENANT_ID: $(MSFT-TENANT-ID)
          E2E_IKEY: $(E2E-IKEY)
          E2E_TEST_AAD_APP_CLIENT_ID: $(E2E-TEST-AAD-APP-CLIENT-ID)
          E2E_TEST_AAD_APP_CLIENT_SECRET: $(E2E-TEST-AAD-APP-CLIENT-SECRET)
          # Environment variables for the DevOps pipeline
          PROXY_SERVER_ADDRESS: 127.0.0.1:8888
          TARGET_BRANCH: $(System.PullRequest.TargetBranch)
          FRAMEWORK: $(FRAMEWORK)
          AZURE_IOT_LOCALPACKAGES: $(Build.SourcesDirectory)/bin/nuget
          # Environment variables for invalid certificate tests
          IOTHUB_DEVICE_CONN_STRING_INVALIDCERT: $(IOTHUB-DEVICE-CONN-STRING-INVALIDCERT)
          IOTHUB_CONN_STRING_INVALIDCERT: $(IOTHUB-CONN-STRING-INVALIDCERT)
          DPS_GLOBALDEVICEENDPOINT_INVALIDCERT: $(DPS-GLOBALDEVICEENDPOINT-INVALIDCERT)
          PROVISIONING_CONNECTION_STRING_INVALIDCERT: $(PROVISIONING-CONNECTION-STRING-INVALIDCERT)
          # Environment variables used by Log Analytics Workspace for Azure Security Center
          LA_AAD_APP_ID: $(LA-AAD-APP-ID)
          LA_AAD_APP_CERT_BASE64: $(LA-AAD-APP-CERT-BASE64)
          LA_WORKSPACE_ID: $(LA-WORKSPACE-ID)

      - task: CopyFiles@2
        displayName: 'Copy TRX files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.trx'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()
      
      - task: CopyFiles@2
        displayName: 'Copy ETL files to the artifacts folder'
        inputs:
          SourceFolder: '$(Build.SourcesDirectory)'
          Contents: '**/*.etl'
          TargetFolder: '$(Build.ArtifactStagingDirectory)'
        condition: always()

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Linux Test Artifacts: $(FRAMEWORK)'
        inputs:
          ArtifactName: testresults_linux_$(FRAMEWORK)
        condition: always()

      - task: PublishTestResults@2
        displayName: 'Publish Linux Test Results: $(FRAMEWORK)'
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
          testRunTitle: "Linux Tests ($(FRAMEWORK)) (Attempt $(System.JobAttempt))"
        condition: always()

  ### Upload unisgned packages for partner signing and release pipeline ###
  - job: Upload_Packages
    displayName: Upload Nuget Packages
    timeoutInMinutes: 15

    condition: succeeded()
    dependsOn:
      - Build_Packages
#      - Windows_Tests
#      - Linux_Tests
### TODO: add these dependency if tests are more stable

    pool:
      vmImage: windows-2022

    variables:
      NUGET_PACKGE_FOLDER: $[ dependencies.Build_Packages.outputs['BUILD_PKG.NUGET_PKG_DATE'] ]

    steps:

      - task: DownloadPipelineArtifact@2
        displayName: 'Download nuget packages from pipeline artifacts'
        inputs:
          buildType: 'current'
          artifactName: 'unsigned_nuget_packages'
          itemPattern: '**/*.*nupkg'
          targetPath: '$(Build.SourcesDirectory)/bin'
            
      - task: PowerShell@2
        displayName: 'Downloaded nuget package files checkpoint'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host "Download contents:"
            gci -Path $(Build.SourcesDirectory)/bin/nuget -Recurse -Force

      - task: PowerShell@2
        displayName: 'Rename Packages for Partner Release Pipeline'
        inputs:
          targetType: 'inline'
          script: |
            Write-Host ""
            Rename-Item $(Build.SourcesDirectory)/bin/nuget $(Build.SourcesDirectory)/bin/pkgs_$(NUGET_PACKGE_FOLDER)
            Write-Host " "
            Write-Host "Package contents (renamed):"
            gci -Path $(Build.SourcesDirectory)/bin -Recurse -Force

#TODO: fix this script to get partner secret from key vault and copy file (avoid update needed for key rotation)
#      - task: AzureCLI@2
#        displayName: 'Copy nuget packages to Partner Release Pipeline Storage'
#        inputs:
#          azureSubscription: azuresdkpartnerdrops
#          scriptType: ps
#          scriptLocation: inlineScript
#          inlineScript: |
#            Write-Host "Copy release package to partner pipeline drops/azure-iot-sdk/net/pkgs_$(BUILD_PKG.NUGET_PKG_DATE)"
#            $env:AZCOPY_SPA_CLIENT_SECRET=get-AzKeyVaultSecret -VaultName azuresdkpartnerdrops-kv -Name azuresdkpartnerdrops-service-principal-key -AsPlainText
#            $env:AZCOPY_SPA_CLIENT_SECRET_APP=get-AzKeyVaultSecret -VaultName azuresdkpartnerdrops-kv -Name azuresdkpartnerdrops-application-id -AsPlainText
#            azcopy login --service-principal --application-id $env:AZCOPY_SPA_CLIENT_SECRET_APP
#            azcopy copy "$(Build.SourcesDirectory)/bin" "https://azuresdkpartnerdrops.blob.core.windows.net/drops/azure-iot-sdk/net" --recursive

      - task: AzureFileCopy@2
        displayName: 'Copy nuget packages to Partner Release Pipeline Storage'
        inputs:
          SourcePath: '$(Build.SourcesDirectory)/bin'
          azureSubscription: azuresdkpartnerdrops
          Destination: AzureBlob
          storage: azuresdkpartnerdrops
          ContainerName: 'drops/azure-iot-sdk/net'

#      - task: AzureArtifacts.manifest-generator-task.manifest-generator-task.ManifestGeneratorTask@0
#        displayName: 'SBOM Generation Task'
#        inputs:
#          BuildDropPath: '$(Build.SourcesDirectory)/bin/pkgs_$(BUILD_PKG.NUGET_PKG_DATE)'
