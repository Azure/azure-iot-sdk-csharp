// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Discovery.Client.Transport.Http.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Challenge Request.
    /// </summary>
    public partial class ChallengeRequest
    {
        /// <summary>
        /// Initializes a new instance of the ChallengeRequest class.
        /// </summary>
        public ChallengeRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ChallengeRequest class.
        /// </summary>
        /// <param name="registrationId">Unique identifier for the device.
        /// Allow alphanumeric and '-', '.', '_', ':' only. Last character can
        /// only be alphanumeric or '-'.</param>
        /// <param name="endorsementKey">Endorsement Key.</param>
        /// <param name="signingKey">Signing Key.</param>
        public ChallengeRequest(string registrationId, byte[] endorsementKey, byte[] signingKey)
        {
            RegistrationId = registrationId;
            EndorsementKey = endorsementKey;
            SigningKey = signingKey;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identifier for the device. Allow alphanumeric
        /// and '-', '.', '_', ':' only. Last character can only be
        /// alphanumeric or '-'.
        /// </summary>
        [JsonProperty(PropertyName = "registrationId")]
        public string RegistrationId { get; set; }

        /// <summary>
        /// Gets or sets endorsement Key.
        /// </summary>
        [JsonProperty(PropertyName = "endorsementKey")]
        public byte[] EndorsementKey { get; set; }

        /// <summary>
        /// Gets or sets signing Key.
        /// </summary>
        [JsonProperty(PropertyName = "signingKey")]
        public byte[] SigningKey { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RegistrationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RegistrationId");
            }
            if (EndorsementKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndorsementKey");
            }
            if (SigningKey == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SigningKey");
            }
            if (RegistrationId != null)
            {
                if (RegistrationId.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RegistrationId", 128);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(RegistrationId, "^([a-zA-Z0-9-._:]{0,127}[a-zA-Z0-9-])$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "RegistrationId", "^([a-zA-Z0-9-._:]{0,127}[a-zA-Z0-9-])$");
                }
            }
        }
    }
}
