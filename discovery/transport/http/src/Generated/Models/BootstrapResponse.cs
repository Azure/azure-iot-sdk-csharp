// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Discovery.Client.Transport.Http.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Bootstrap Response.
    /// </summary>
    public partial class BootstrapResponse
    {
        /// <summary>
        /// Initializes a new instance of the BootstrapResponse class.
        /// </summary>
        public BootstrapResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BootstrapResponse class.
        /// </summary>
        /// <param name="edgeProvisioningEndpoint">The hostname to use to
        /// connect to the edge provisioning service.</param>
        /// <param name="issuedCredential">Issued Credential.</param>
        public BootstrapResponse(string edgeProvisioningEndpoint, Credential issuedCredential)
        {
            EdgeProvisioningEndpoint = edgeProvisioningEndpoint;
            IssuedCredential = issuedCredential;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the hostname to use to connect to the edge
        /// provisioning service.
        /// </summary>
        [JsonProperty(PropertyName = "edgeProvisioningEndpoint")]
        public string EdgeProvisioningEndpoint { get; set; }

        /// <summary>
        /// Gets or sets issued Credential.
        /// </summary>
        [JsonProperty(PropertyName = "issuedCredential")]
        public Credential IssuedCredential { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (EdgeProvisioningEndpoint == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EdgeProvisioningEndpoint");
            }
            if (IssuedCredential == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IssuedCredential");
            }
        }
    }
}
