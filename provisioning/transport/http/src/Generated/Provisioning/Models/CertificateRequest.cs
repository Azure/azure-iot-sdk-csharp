// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Provisioning.Client.Transport.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// The certificate issuance request.
    /// </summary>
    public partial class CertificateRequest
    {
        /// <summary>
        /// Initializes a new instance of the CertificateRequest class.
        /// </summary>
        public CertificateRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateRequest class.
        /// </summary>
        /// <param name="registrationId">Unique identifier for the device.
        /// Allow lowercase alphanumeric and '-', '.', '_', ':' only. Last
        /// character can only be lowercase alphanumeric or '-'.</param>
        /// <param name="csr">A DER-encoded certificate signing request (CSR).
        /// The CN field of the CSR must be set to the device
        /// registrationId.</param>
        public CertificateRequest(string registrationId, byte[] csr)
        {
            RegistrationId = registrationId;
            Csr = csr;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets unique identifier for the device. Allow lowercase
        /// alphanumeric and '-', '.', '_', ':' only. Last character can only
        /// be lowercase alphanumeric or '-'.
        /// </summary>
        [JsonProperty(PropertyName = "registrationId")]
        public string RegistrationId { get; set; }

        /// <summary>
        /// Gets or sets a DER-encoded certificate signing request (CSR). The
        /// CN field of the CSR must be set to the device registrationId.
        /// </summary>
        [JsonProperty(PropertyName = "csr")]
        public byte[] Csr { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (RegistrationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RegistrationId");
            }
            if (Csr == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Csr");
            }
            if (RegistrationId != null)
            {
                if (RegistrationId.Length > 128)
                {
                    throw new ValidationException(ValidationRules.MaxLength, "RegistrationId", 128);
                }
                if (!System.Text.RegularExpressions.Regex.IsMatch(RegistrationId, "^([a-z0-9-._:]{0,127}[a-z0-9-])$"))
                {
                    throw new ValidationException(ValidationRules.Pattern, "RegistrationId", "^([a-z0-9-._:]{0,127}[a-z0-9-])$");
                }
            }
        }
    }
}
