// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Provisioning.Client.Transport.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The HybridComputeMachine onboarding response.
    /// </summary>
    [Newtonsoft.Json.JsonObject("HybridComputeMachine")]
    public partial class HybridComputeMachineResponse : ResponseMetadata
    {
        /// <summary>
        /// Initializes a new instance of the HybridComputeMachineResponse
        /// class.
        /// </summary>
        public HybridComputeMachineResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the HybridComputeMachineResponse
        /// class.
        /// </summary>
        /// <param name="resourceId">The device's Azure Resource Manager
        /// resourceId.</param>
        /// <param name="location">The Azure region to which the device
        /// belongs.</param>
        /// <param name="tenantId">The Azure Tenant associated with the
        /// device.</param>
        /// <param name="arcVirtualMachineId">The unique identifier of the
        /// Azure Arc Virtual Machine.</param>
        /// <param name="assignedEndpoints">A list of endpoints assigned to the
        /// device. Optional property for HybridComputeMachines.</param>
        public HybridComputeMachineResponse(string resourceId, string location, string tenantId, string arcVirtualMachineId, IList<Endpoint> assignedEndpoints = default(IList<Endpoint>))
        {
            ResourceId = resourceId;
            Location = location;
            TenantId = tenantId;
            ArcVirtualMachineId = arcVirtualMachineId;
            AssignedEndpoints = assignedEndpoints;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the device's Azure Resource Manager resourceId.
        /// </summary>
        [JsonProperty(PropertyName = "resourceId")]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or sets the Azure region to which the device belongs.
        /// </summary>
        [JsonProperty(PropertyName = "location")]
        public string Location { get; set; }

        /// <summary>
        /// Gets or sets the Azure Tenant associated with the device.
        /// </summary>
        [JsonProperty(PropertyName = "tenantId")]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or sets the unique identifier of the Azure Arc Virtual
        /// Machine.
        /// </summary>
        [JsonProperty(PropertyName = "arcVirtualMachineId")]
        public string ArcVirtualMachineId { get; set; }

        /// <summary>
        /// Gets or sets a list of endpoints assigned to the device. Optional
        /// property for HybridComputeMachines.
        /// </summary>
        [JsonProperty(PropertyName = "assignedEndpoints")]
        public IList<Endpoint> AssignedEndpoints { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ResourceId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceId");
            }
            if (Location == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Location");
            }
            if (TenantId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "TenantId");
            }
            if (ArcVirtualMachineId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ArcVirtualMachineId");
            }
            if (AssignedEndpoints != null)
            {
                foreach (var element in AssignedEndpoints)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
