// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Provisioning.Client.Transport.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// The issued certificate.
    /// </summary>
    public partial class CertificateResponse
    {
        /// <summary>
        /// Initializes a new instance of the CertificateResponse class.
        /// </summary>
        public CertificateResponse()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the CertificateResponse class.
        /// </summary>
        /// <param name="certificate">A list of one or more DER-encoded
        /// certificates representing a certificate chain, with the first
        /// element being the leaf certificate issued for the device. No
        /// private key is included.</param>
        /// <param name="renewalIntervalInDays">The number of days before
        /// certificate renewal is recommended, according to the provisioning
        /// policy.</param>
        public CertificateResponse(IList<byte[]> certificate, long renewalIntervalInDays)
        {
            Certificate = certificate;
            RenewalIntervalInDays = renewalIntervalInDays;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets a list of one or more DER-encoded certificates
        /// representing a certificate chain, with the first element being the
        /// leaf certificate issued for the device. No private key is included.
        /// </summary>
        [JsonProperty(PropertyName = "certificate")]
        public IList<byte[]> Certificate { get; set; }

        /// <summary>
        /// Gets or sets the number of days before certificate renewal is
        /// recommended, according to the provisioning policy.
        /// </summary>
        [JsonProperty(PropertyName = "renewalIntervalInDays")]
        public long RenewalIntervalInDays { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Certificate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Certificate");
            }
        }
    }
}
