// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Provisioning.Client.Transport.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Endpoint object.
    /// </summary>
    public partial class Endpoint
    {
        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>
        public Endpoint()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the Endpoint class.
        /// </summary>
        /// <param name="hostname">The endpoint hostname.</param>
        /// <param name="name">The allocation group name.</param>
        public Endpoint(string hostname, string name)
        {
            Hostname = hostname;
            Name = name;
            CustomInit();
        }
        /// <summary>
        /// Static constructor for Endpoint class.
        /// </summary>
        static Endpoint()
        {
            EndpointType = "AzureEventGridBroker";
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the endpoint hostname.
        /// </summary>
        [JsonProperty(PropertyName = "hostname")]
        public string Hostname { get; set; }

        /// <summary>
        /// Gets or sets the allocation group name.
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// The Endpoint type.
        /// </summary>
        [JsonProperty(PropertyName = "endpointType")]
        public static string EndpointType { get; private set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Hostname == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Hostname");
            }
            if (Name == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Name");
            }
        }
    }
}
