// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Provisioning.Service.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Bulk operation
    /// </summary>
    public partial class BulkEnrollmentOperation
    {
        /// <summary>
        /// Initializes a new instance of the BulkEnrollmentOperation class.
        /// </summary>
        public BulkEnrollmentOperation()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BulkEnrollmentOperation class.
        /// </summary>
        /// <param name="enrollments">Enrollment items</param>
        /// <param name="mode">Operation mode. Possible values include:
        /// 'create', 'update', 'updateIfMatchETag', 'delete'</param>
        public BulkEnrollmentOperation(IList<IndividualEnrollment> enrollments, string mode)
        {
            Enrollments = enrollments;
            Mode = mode;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets enrollment items
        /// </summary>
        [JsonProperty(PropertyName = "enrollments")]
        public IList<IndividualEnrollment> Enrollments { get; set; }

        /// <summary>
        /// Gets or sets operation mode. Possible values include: 'create',
        /// 'update', 'updateIfMatchETag', 'delete'
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Enrollments == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Enrollments");
            }
            if (Mode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Mode");
            }
            if (Enrollments != null)
            {
                foreach (var element in Enrollments)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
