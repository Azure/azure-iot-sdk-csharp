{
  "swagger": "2.0",
  "info": {
    "version": "2018-09-01-preview",
    "title": "ProvisioningServiceClient",
    "description": "API for service operations with the Azure IoT Hub Device Provisioning Service"
  },
  "host": "your-dps.azure-devices-provisioning.net",
  "schemes": [
    "https"
  ],
  "paths": {
    "/enrollments/{id}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a device enrollment record.",
        "operationId": "GetIndividualEnrollment",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registration ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IndividualEnrollment"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or update a device enrollment record.",
        "operationId": "CreateOrUpdateIndividualEnrollment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The registration ID is alphanumeric, lowercase, and may contain hyphens.",
            "required": true,
            "type": "string"
          },
          {
            "name": "enrollment",
            "in": "body",
            "description": "The device enrollment record.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IndividualEnrollment"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the enrollment record.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/IndividualEnrollment"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete a device enrollment record.",
        "operationId": "DeleteIndividualEnrollment",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registration ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the enrollment record.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/enrollmentGroups/{id}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Get a device enrollment group.",
        "operationId": "GetEnrollmentGroup",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment group ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnrollmentGroup"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "put": {
        "tags": [
          "PUT"
        ],
        "summary": "Create or update a device enrollment group.",
        "operationId": "CreateOrUpdateEnrollmentGroup",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment group ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "enrollmentGroup",
            "in": "body",
            "description": "The device enrollment group.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EnrollmentGroup"
            }
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the enrollment record.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/EnrollmentGroup"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Delete a device enrollment group.",
        "operationId": "DeleteEnrollmentGroup",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment group ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the enrollment group record.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/registrations/{id}": {
      "get": {
        "tags": [
          "GET"
        ],
        "summary": "Gets the device registration state.",
        "operationId": "GetDeviceRegistrationState",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registration ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/DeviceRegistrationState"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "DELETE"
        ],
        "summary": "Deletes the device registration",
        "operationId": "DeleteDeviceRegistrationState",
        "consumes": [],
        "produces": [],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registration ID.",
            "required": true,
            "type": "string"
          },
          {
            "name": "If-Match",
            "in": "header",
            "description": "The ETag of the registration status record.",
            "required": false,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/enrollments": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Bulk device enrollment operation.",
        "operationId": "RunBulkEnrollmentOperation",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "bulkOperation",
            "in": "body",
            "description": "Bulk operation.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BulkEnrollmentOperation"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/BulkEnrollmentOperationResult"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/enrollments/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Query the device enrollment records.",
        "operationId": "QueryIndividualEnrollments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x-ms-continuation",
            "in": "header",
            "description": "continuation token",
            "required": false,
            "type": "string"
          },
          {
            "name": "querySpecification",
            "in": "body",
            "description": "The query specification.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuerySpecification"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/IndividualEnrollment"
              }
            },
            "headers": {
              "x-ms-continuation": {
                "description": "The continuation token for getting the next page of results.",
                "type": "string"
              },
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              },
              "x-ms-item-type": {
                "description": "The query result type.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/enrollments/{id}/attestationmechanism": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Get the attestation mechanism in the device enrollment record",
        "operationId": "GetIndividualEnrollmentAttestationMechanism",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Registration ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttestationMechanism"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/enrollmentGroups/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Query the device enrollment groups.",
        "operationId": "QueryEnrollmentGroups",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "x-ms-max-item-count",
            "in": "header",
            "description": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "x-ms-continuation",
            "in": "header",
            "description": "continuation token",
            "required": false,
            "type": "string"
          },
          {
            "name": "querySpecification",
            "in": "body",
            "description": "The query specification.",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QuerySpecification"
            }
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnrollmentGroup"
              }
            },
            "headers": {
              "x-ms-continuation": {
                "description": "The continuation token for getting the next page of results.",
                "type": "string"
              },
              "x-ms-max-item-count": {
                "description": "The maximum number of items returned in a page.",
                "type": "integer"
              },
              "x-ms-item-type": {
                "description": "The query result type.",
                "type": "string"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/enrollmentGroups/{id}/attestationmechanism": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Get the attestation mechanism in the device enrollment group record",
        "operationId": "GetEnrollmentGroupAttestationMechanism",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment group ID",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/AttestationMechanism"
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    },
    "/registrations/{id}/query": {
      "post": {
        "tags": [
          "POST"
        ],
        "summary": "Gets the registration state of devices in this enrollmentGroup.",
        "operationId": " QueryDeviceRegistrationStates",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Enrollment group ID.",
            "required": true,
            "type": "string"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/DeviceRegistrationState"
              }
            }
          },
          "default": {
            "description": "Error response",
            "schema": {
              "$ref": "#/definitions/ProvisioningServiceErrorDetails"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ProvisioningServiceErrorDetails": {
      "type": "object",
      "description": "Contains the properties of an error returned by the Azure IoT Hub Provisioning Service ",
      "properties": {
        "errorCode": {
          "format": "int32",
          "type": "integer"
        },
        "trackingId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "info": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timestampUtc": {
          "format": "date-time",
          "type": "string"
        }
      }
    },
    "IndividualEnrollment": {
      "description": "The device enrollment record.",
      "required": [
        "registrationId",
        "attestation"
      ],
      "type": "object",
      "properties": {
        "capabilities": {
          "$ref": "#/definitions/DeviceCapabilities",
          "description": "Capabilities of the device"
        },
        "registrationId": {
          "description": "The registration ID is alphanumeric, lowercase, and may contain hyphens.",
          "type": "string"
        },
        "deviceId": {
          "description": "Desired IoT Hub device ID (optional).",
          "type": "string"
        },
        "registrationState": {
          "$ref": "#/definitions/DeviceRegistrationState",
          "description": "Current registration status.",
          "readOnly": true
        },
        "attestation": {
          "$ref": "#/definitions/AttestationMechanism",
          "description": "Attestation method used by the device."
        },
        "iotHubHostName": {
          "description": "The Iot Hub host name.",
          "type": "string"
        },
        "initialTwin": {
          "$ref": "#/definitions/InitialTwin",
          "description": "Initial device twin."
        },
        "etag": {
          "description": "The entity tag associated with the resource.",
          "type": "string"
        },
        "provisioningStatus": {
          "description": "The provisioning status.",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string"
        },
        "reprovisionPolicy": {
          "$ref": "#/definitions/ReprovisionPolicy",
          "description": "The behavior when a device is re-provisioned to an IoT hub."
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated.",
          "type": "string",
          "readOnly": true
        },
        "allocationPolicy": {
          "description": "The allocation policy of this resource. This policy overrides the tenant level allocation policy for this individual enrollment or enrollment group. Possible values include 'hashed': Linked IoT hubs are equally likely to have devices provisioned to them, 'geoLatency':  Devices are provisioned to an IoT hub with the lowest latency to the device.If multiple linked IoT hubs would provide the same lowest latency, the provisioning service hashes devices across those hubs, 'static' : Specification of the desired IoT hub in the enrollment list takes priority over the service-level allocation policy, 'custom': Devices are provisioned to an IoT hub based on your own custom logic. The provisioning service passes information about the device to the logic, and the logic returns the desired IoT hub as well as the desired initial configuration. We recommend using Azure Functions to host your logic.",
          "enum": [
            "hashed",
            "geoLatency",
            "static",
            "custom"
          ],
          "type": "string"
        },
        "iotHubs": {
          "description": "The list of names of IoT hubs the device(s) in this resource can be allocated to. Must be a subset of tenant level list of IoT hubs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customAllocationDefinition": {
          "$ref": "#/definitions/CustomAllocationDefinition",
          "description": "Custom allocation definition."
        }
      }
    },
    "DeviceCapabilities": {
      "description": "Device capabilities.",
      "required": [
        "iotEdge"
      ],
      "type": "object",
      "properties": {
        "iotEdge": {
          "description": "If set to true, this device is an IoTEdge device.",
          "default": "false",
          "type": "boolean"
        }
      }
    },
    "DeviceRegistrationState": {
      "description": "Device registration state.",
      "type": "object",
      "properties": {
        "registrationId": {
          "description": "The registration ID is alphanumeric, lowercase, and may contain hyphens.",
          "type": "string",
          "readOnly": true
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "Registration create date time (in UTC).",
          "type": "string",
          "readOnly": true
        },
        "assignedHub": {
          "description": "Assigned Azure IoT Hub.",
          "type": "string",
          "readOnly": true
        },
        "deviceId": {
          "description": "Device ID.",
          "type": "string",
          "readOnly": true
        },
        "status": {
          "description": "Enrollment status.",
          "enum": [
            "unassigned",
            "assigning",
            "assigned",
            "failed",
            "disabled"
          ],
          "type": "string",
          "readOnly": true
        },
        "substatus": {
          "description": "Substatus for 'Assigned' devices. Possible values include - 'initialAssignment': Device has been assigned to an IoT hub for the first time, 'deviceDataMigrated': Device has been assigned to a different IoT hub and its device data was migrated from the previously assigned IoT hub. Device data was removed from the previously assigned IoT hub, 'deviceDataReset':  Device has been assigned to a different IoT hub and its device data was populated from the initial state stored in the enrollment. Device data was removed from the previously assigned IoT hub.",
          "enum": [
            "initialAssignment",
            "deviceDataMigrated",
            "deviceDataReset"
          ],
          "type": "string",
          "readOnly": true
        },
        "errorCode": {
          "format": "int32",
          "description": "Error code.",
          "type": "integer",
          "readOnly": true
        },
        "errorMessage": {
          "description": "Error message.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "Last updated date time (in UTC).",
          "type": "string",
          "readOnly": true
        },
        "etag": {
          "description": "The entity tag associated with the resource.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "AttestationMechanism": {
      "description": "Attestation mechanism for individualEnrollment as well as enrollmentGroup",
      "required": [
        "type"
      ],
      "type": "object",
      "properties": {
        "type": {
          "description": "Attestation Type.",
          "enum": [
            "none",
            "tpm",
            "x509",
            "symmetricKey"
          ],
          "type": "string"
        },
        "tpm": {
          "$ref": "#/definitions/TpmAttestation",
          "description": "TPM attestation method."
        },
        "x509": {
          "$ref": "#/definitions/X509Attestation",
          "description": "X509 attestation method."
        },
        "symmetricKey": {
          "$ref": "#/definitions/SymmetricKeyAttestation",
          "description": "Symmetric Key attestation method."
        }
      }
    },
    "InitialTwin": {
      "description": "Initial device twin. Contains a subset of the properties of Twin.",
      "type": "object",
      "properties": {
        "tags": {
          "$ref": "#/definitions/TwinCollection",
          "description": "Twin tags."
        },
        "properties": {
          "$ref": "#/definitions/InitialTwinProperties",
          "description": "Twin desired properties."
        }
      }
    },
    "ReprovisionPolicy": {
      "description": "The behavior of the service when a device is re-provisioned to an IoT hub.",
      "required": [
        "updateHubAssignment",
        "migrateDeviceData"
      ],
      "type": "object",
      "properties": {
        "updateHubAssignment": {
          "description": "When set to true (default), the Device Provisioning Service will evaluate the device's IoT Hub assignment and update it if necessary for any provisioning requests beyond the first from a given device. If set to false, the device will stay assigned to its current IoT hub.",
          "default": "true",
          "type": "boolean"
        },
        "migrateDeviceData": {
          "description": "When set to true (default), the Device Provisioning Service will migrate the device's data (twin, device capabilities, and device ID) from one IoT hub to another during an IoT hub assignment update. If set to false, the Device Provisioning Service will reset the device's data to the initial desired configuration stored in the corresponding enrollment list.",
          "default": "true",
          "type": "boolean"
        }
      }
    },
    "CustomAllocationDefinition": {
      "description": "Custom allocation definition.",
      "required": [
        "webhookUrl",
        "apiVersion"
      ],
      "type": "object",
      "properties": {
        "webhookUrl": {
          "description": "The webhook URL used for allocation requests.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The API version of the provisioning service types (such as IndividualEnrollment) sent in the custom allocation request. Supported versions include: \"2018-09-01-preview\"",
          "type": "string"
        }
      }
    },
    "TpmAttestation": {
      "description": "Attestation via TPM.",
      "required": [
        "endorsementKey"
      ],
      "type": "object",
      "properties": {
        "endorsementKey": {
          "type": "string"
        },
        "storageRootKey": {
          "type": "string"
        }
      }
    },
    "X509Attestation": {
      "description": "Attestation via X509.",
      "type": "object",
      "properties": {
        "clientCertificates": {
          "$ref": "#/definitions/X509Certificates"
        },
        "signingCertificates": {
          "$ref": "#/definitions/X509Certificates"
        },
        "caReferences": {
          "$ref": "#/definitions/X509CAReferences"
        }
      }
    },
    "SymmetricKeyAttestation": {
      "description": "Attestation via SymmetricKey.",
      "type": "object",
      "properties": {
        "primaryKey": {
          "description": "Primary symmetric key.",
          "type": "string"
        },
        "secondaryKey": {
          "description": "Secondary symmetric key.",
          "type": "string"
        }
      }
    },
    "InitialTwinProperties": {
      "type": "object",
      "description": "Represents the initial properties that will be set on the device twin",
      "properties": {
        "desired": {
          "$ref": "#/definitions/TwinCollection",
          "description": "Gets and sets the InitialTwin desired properties."
        }
      }
    },
    "X509Certificates": {
      "description": "Primary and secondary certificates",
      "type": "object",
      "properties": {
        "primary": {
          "$ref": "#/definitions/X509CertificateWithInfo"
        },
        "secondary": {
          "$ref": "#/definitions/X509CertificateWithInfo"
        }
      }
    },
    "X509CAReferences": {
      "description": "Primary and secondary CA references.",
      "type": "object",
      "properties": {
        "primary": {
          "type": "string"
        },
        "secondary": {
          "type": "string"
        }
      }
    },
    "X509CertificateWithInfo": {
      "description": "Certificate and Certificate info",
      "type": "object",
      "properties": {
        "certificate": {
          "type": "string"
        },
        "info": {
          "$ref": "#/definitions/X509CertificateInfo"
        }
      }
    },
    "X509CertificateInfo": {
      "description": "X509 certificate info.",
      "required": [
        "subjectName",
        "sha1Thumbprint",
        "sha256Thumbprint",
        "issuerName",
        "notBeforeUtc",
        "notAfterUtc",
        "serialNumber",
        "version"
      ],
      "type": "object",
      "properties": {
        "subjectName": {
          "type": "string"
        },
        "sha1Thumbprint": {
          "type": "string"
        },
        "sha256Thumbprint": {
          "type": "string"
        },
        "issuerName": {
          "type": "string"
        },
        "notBeforeUtc": {
          "format": "date-time",
          "type": "string"
        },
        "notAfterUtc": {
          "format": "date-time",
          "type": "string"
        },
        "serialNumber": {
          "type": "string"
        },
        "version": {
          "format": "int32",
          "type": "integer"
        }
      }
    },
    "EnrollmentGroup": {
      "description": "Enrollment group record.",
      "required": [
        "enrollmentGroupId",
        "attestation"
      ],
      "type": "object",
      "properties": {
        "enrollmentGroupId": {
          "description": "Enrollment Group ID.",
          "type": "string"
        },
        "attestation": {
          "$ref": "#/definitions/AttestationMechanism",
          "description": "Attestation method used by the device."
        },
        "iotHubHostName": {
          "description": "The Iot Hub host name.",
          "type": "string"
        },
        "initialTwin": {
          "$ref": "#/definitions/InitialTwin",
          "description": "Initial device twin."
        },
        "etag": {
          "description": "The entity tag associated with the resource.",
          "type": "string"
        },
        "provisioningStatus": {
          "description": "The provisioning status.",
          "default": "enabled",
          "enum": [
            "enabled",
            "disabled"
          ],
          "type": "string"
        },
        "reprovisionPolicy": {
          "$ref": "#/definitions/ReprovisionPolicy",
          "description": "The behavior when a device is re-provisioned to an IoT hub."
        },
        "createdDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was created.",
          "type": "string",
          "readOnly": true
        },
        "lastUpdatedDateTimeUtc": {
          "format": "date-time",
          "description": "The DateTime this resource was last updated.",
          "type": "string",
          "readOnly": true
        },
        "allocationPolicy": {
          "description": "The allocation policy of this resource. This policy overrides the tenant level allocation policy for this individual enrollment or enrollment group. Possible values include 'hashed': Linked IoT hubs are equally likely to have devices provisioned to them, 'geoLatency':  Devices are provisioned to an IoT hub with the lowest latency to the device.If multiple linked IoT hubs would provide the same lowest latency, the provisioning service hashes devices across those hubs, 'static' : Specification of the desired IoT hub in the enrollment list takes priority over the service-level allocation policy, 'custom': Devices are provisioned to an IoT hub based on your own custom logic. The provisioning service passes information about the device to the logic, and the logic returns the desired IoT hub as well as the desired initial configuration. We recommend using Azure Functions to host your logic.",
          "enum": [
            "hashed",
            "geoLatency",
            "static",
            "custom"
          ],
          "type": "string"
        },
        "iotHubs": {
          "description": "The list of names of IoT hubs the device(s) in this resource can be allocated to. Must be a subset of tenant level list of IoT hubs.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customAllocationDefinition": {
          "$ref": "#/definitions/CustomAllocationDefinition",
          "description": "Custom allocation definition."
        }
      }
    },
    "BulkEnrollmentOperation": {
      "description": "Bulk operation",
      "required": [
        "enrollments",
        "mode"
      ],
      "type": "object",
      "properties": {
        "enrollments": {
          "description": "Enrollment items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/IndividualEnrollment"
          }
        },
        "mode": {
          "description": "Operation mode",
          "enum": [
            "create",
            "update",
            "updateIfMatchETag",
            "delete"
          ],
          "type": "string"
        }
      }
    },
    "BulkEnrollmentOperationResult": {
      "required": [
        "isSuccessful"
      ],
      "type": "object",
      "description": "Results of a bulk enrollment operation",
      "properties": {
        "isSuccessful": {
          "description": "Indicates if the operation was successful in its entirety",
          "type": "boolean"
        },
        "errors": {
          "description": "Registration errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/BulkEnrollmentOperationError"
          }
        }
      }
    },
    "BulkEnrollmentOperationError": {
      "description": "Bulk enrollment operation error",
      "required": [
        "registrationId",
        "errorCode",
        "errorStatus"
      ],
      "type": "object",
      "properties": {
        "registrationId": {
          "description": "Device registration id.",
          "type": "string"
        },
        "errorCode": {
          "format": "int32",
          "description": "Error code",
          "type": "integer"
        },
        "errorStatus": {
          "description": "Error status",
          "type": "string"
        }
      }
    },
    "QuerySpecification": {
      "description": "A Json query request",
      "required": [
        "query"
      ],
      "type": "object",
      "properties": {
        "query": {
          "description": "The query.",
          "type": "string"
        }
      }
    },
    "TwinCollection": {
      "type": "object",
      "description": "Represents a collection of properties within a Twin",
      "properties": {
        "version": {
          "description": "Version of the TwinCollection",
          "format": "int64",
          "type": "integer"
        },
        "count": {
          "description": "Number of properties in the TwinCollection",
          "type": "integer"
        },
        "metadata": {
          "description": "Metadata for the TwinCollection",
          "$ref": "#/definitions/Metadata"
        }
      },
      "additionalProperties": {
        "type": "object"
      }
    },
    "Metadata": {
      "type": "object",
      "description": "Metadata for the TwinCollection",
      "properties": {
        "lastUpdated": {
          "description": "Last time the TwinCollection was updated",
          "format": "date-time",
          "type": "string"
        },
        "lastUpdatedVersion": {
          "format": "int64",
          "description": "This SHOULD be null for Reported properties metadata and MUST not be null for Desired properties metadata.",
          "type": "integer"
        }
      }
    }
  },
  "parameters": {
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "description": "The API version to use for the request. Supported versions include: 2018-09-01-preview",
      "required": true,
      "type": "string",
      "default": "2018-09-01-preview"
    }
  }
}