// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Microsoft.Azure.Devices.Generated
{
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for DigitalTwin.
    /// </summary>
    internal static partial class DigitalTwinExtensions
    {
            /// <summary>
            /// Gets a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Digital Twin ID.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetDigitalTwinAsync(this IDigitalTwin operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDigitalTwinWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Updates a digital twin.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// Digital Twin ID.
            /// </param>
            /// <param name='digitalTwinPatch'>
            /// json-patch contents to update.
            /// </param>
            /// <param name='ifMatch'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<DigitalTwinUpdateHeaders> UpdateDigitalTwinAsync(this IDigitalTwin operations, string id, string digitalTwinPatch, string ifMatch = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDigitalTwinWithHttpMessagesAsync(id, digitalTwinPatch, ifMatch, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Headers;
                }
            }

            /// <summary>
            /// Invoke a digital twin root level command.
            /// </summary>
            /// <remarks>
            /// Invoke a digital twin root level command.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='commandName'>
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='connectTimeoutInSeconds'>
            /// Maximum interval of time, in seconds, that the digital twin command will
            /// wait for the answer.
            /// </param>
            /// <param name='responseTimeoutInSeconds'>
            /// Maximum interval of time, in seconds, that the digital twin command will
            /// wait for the answer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InvokeRootLevelCommandAsync(this IDigitalTwin operations, string id, string commandName, string payload = default, int? connectTimeoutInSeconds = default(int?), int? responseTimeoutInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InvokeRootLevelCommandWithHttpMessagesAsync(id, commandName, payload, connectTimeoutInSeconds, responseTimeoutInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Invoke a digital twin command.
            /// </summary>
            /// <remarks>
            /// Invoke a digital twin command.
            /// </remarks>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='componentPath'>
            /// </param>
            /// <param name='commandName'>
            /// </param>
            /// <param name='payload'>
            /// </param>
            /// <param name='connectTimeoutInSeconds'>
            /// Maximum interval of time, in seconds, that the digital twin command will
            /// wait for the answer.
            /// </param>
            /// <param name='responseTimeoutInSeconds'>
            /// Maximum interval of time, in seconds, that the digital twin command will
            /// wait for the answer.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> InvokeComponentCommandAsync(this IDigitalTwin operations, string id, string componentPath, string commandName, string payload = default, int? connectTimeoutInSeconds = default(int?), int? responseTimeoutInSeconds = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.InvokeComponentCommandWithHttpMessagesAsync(id, componentPath, commandName, payload, connectTimeoutInSeconds, responseTimeoutInSeconds, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}