// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Text;
using Newtonsoft.Json;

namespace Microsoft.Azure.Devices
{
    /// <summary>
    /// An outgoing message to be sent to a device or module using cloud-to-device messaging.
    /// </summary>
    /// <seealso href="https://learn.microsoft.com/azure/iot-hub/iot-hub-devguide-messages-c2d"/>
    public sealed class OutgoingMessage
    {
        /// <summary>
        /// Default constructor with no body data.
        /// </summary>
        public OutgoingMessage()
        {
        }

        /// <summary>
        /// Creates a cloud-to-device message with the specified payload.
        /// </summary>
        /// <remarks>User should treat the input byte array as immutable when sending the message.</remarks>
        /// <param name="payload">The payload will be serialized with
        /// <see href="https://www.nuget.org/packages/Newtonsoft.Json">Newtonsoft.Json</see> and encoded using <see cref="Encoding.UTF8"/>.</param>
        public OutgoingMessage(object payload)
        {
            Payload = payload;
        }

        /// <summary>
        /// Creates a cloud-to-device message with the specified binary payload.
        /// </summary>
        /// <param name="binaryPayload">The binary payload to send.</param>
        public OutgoingMessage(byte[] binaryPayload)
        {
            Payload = binaryPayload;
        }

        /// <summary>
        /// [Required for two way requests] Used to correlate two-way communication.
        /// Format: A case-sensitive string ( up to 128 char long) of ASCII 7-bit alphanumeric chars
        /// + {'-', ':', '/', '\', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''}.
        /// Non-alphanumeric characters are from URN RFC.
        /// </summary>
        /// <remarks>
        /// If this value is not supplied by the user, the service client will set this to a new GUID.
        /// </remarks>
        public string MessageId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.MessageId);
            set => SystemProperties[MessageSystemPropertyNames.MessageId] = value;
        }

        /// <summary>
        /// [Required] Destination of the message.
        /// </summary>
        public string To
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.To);
            set => SystemProperties[MessageSystemPropertyNames.To] = value;
        }

        /// <summary>
        /// [Optional] The time when this message is considered expired.
        /// </summary>
        public DateTimeOffset ExpiresOnUtc
        {
            get => GetSystemProperty<DateTimeOffset>(MessageSystemPropertyNames.ExpiryTimeUtc);
            set => SystemProperties[MessageSystemPropertyNames.ExpiryTimeUtc] = value;
        }

        /// <summary>
        /// A string property in a response message that typically contains the MessageId of the request, in request-reply patterns.
        /// </summary>
        public string CorrelationId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.CorrelationId);
            set => SystemProperties[MessageSystemPropertyNames.CorrelationId] = value;
        }

        /// <summary>
        /// [Required] SequenceNumber of the received message.
        /// </summary>
        internal ulong SequenceNumber
        {
            get => GetSystemProperty<ulong>(MessageSystemPropertyNames.SequenceNumber);
            set => SystemProperties[MessageSystemPropertyNames.SequenceNumber] = value;
        }

        /// <summary>
        /// [Required] LockToken of the received message.
        /// </summary>
        public string LockToken
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.LockToken);
            internal set => SystemProperties[MessageSystemPropertyNames.LockToken] = value;
        }

        /// <summary>
        /// When the message was received by the server.
        /// </summary>
        internal DateTimeOffset EnqueuedOnUtc
        {
            get => GetSystemProperty<DateTimeOffset>(MessageSystemPropertyNames.EnqueuedOn);
            set => SystemProperties[MessageSystemPropertyNames.EnqueuedOn] = value;
        }

        /// <summary>
        /// [Required in feedback messages] Used to specify the origin of messages generated by device hub.
        /// Possible value: “{hub name}/”
        /// </summary>
        public string UserId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.UserId);
            set => SystemProperties[MessageSystemPropertyNames.UserId] = value;
        }

        /// <summary>
        /// Used to specify the schema of the message content.
        /// </summary>
        public string MessageSchema
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.MessageSchema);
            set => SystemProperties[MessageSystemPropertyNames.MessageSchema] = value;
        }

        /// <summary>
        /// Custom date property set by the originator of the message.
        /// </summary>
        public DateTimeOffset CreatedOnUtc
        {
            get => GetSystemProperty<DateTimeOffset>(MessageSystemPropertyNames.CreationTimeUtc);
            set => SystemProperties[MessageSystemPropertyNames.CreationTimeUtc] = value;
        }

        /// <summary>
        /// Used to specify the content type of the message.
        /// </summary>
        public string ContentType
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.ContentType);
            set => SystemProperties[MessageSystemPropertyNames.ContentType] = value;
        }

        /// <summary>
        /// Used to specify the content encoding type of the message.
        /// </summary>
        public string ContentEncoding
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.ContentEncoding);
            set => SystemProperties[MessageSystemPropertyNames.ContentEncoding] = value;
        }

        /// <summary>
        /// Used in cloud-to-device messages to request IoT hub to generate feedback messages as a result of the consumption of the message by the device.
        /// </summary>
        /// <remarks>
        /// Possible values:
        /// <para>none (default): no feedback message is generated.</para>
        /// <para>positive: receive a feedback message if the message was completed.</para>
        /// <para>negative: receive a feedback message if the message expired (or maximum delivery count was reached) without being completed by the device.</para>
        /// <para>full: both positive and negative.</para>
        /// <para>
        /// In order to receive feedback messages on the service client, use <see cref="IotHubServiceClient.MessageFeedback"/>.
        /// </para>
        /// </remarks>
        public DeliveryAcknowledgement Ack
        {
            get
            {
                string deliveryAckAsString = GetSystemProperty<string>(MessageSystemPropertyNames.Ack);

                if (string.IsNullOrWhiteSpace(deliveryAckAsString))
                {
                    throw new IotHubServiceException("Invalid delivery ack mode");
                }

                return deliveryAckAsString switch
                {
                    "none" => DeliveryAcknowledgement.None,
                    "positive" => DeliveryAcknowledgement.PositiveOnly,
                    "negative" => DeliveryAcknowledgement.NegativeOnly,
                    "full" => DeliveryAcknowledgement.Full,
                    _ => throw new IotHubServiceException("Invalid delivery ack mode"),
                };
            }
            set
            {
                string valueToSet = value switch
                {
                    DeliveryAcknowledgement.None => "none",
                    DeliveryAcknowledgement.PositiveOnly => "positive",
                    DeliveryAcknowledgement.NegativeOnly => "negative",
                    DeliveryAcknowledgement.Full => "full",
                    _ => throw new IotHubServiceException("Invalid delivery ack mode"),
                };
                SystemProperties[MessageSystemPropertyNames.Ack] = valueToSet;
            }
        }

        /// <summary>
        /// Gets the dictionary of user properties which are set when user send the data.
        /// </summary>
        public IDictionary<string, string> Properties { get; private set; } = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// Gets the dictionary of system properties which are managed internally.
        /// </summary>
        internal IDictionary<string, object> SystemProperties { get; private set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// The message payload.
        /// </summary>
        public object Payload { get; }

        /// <summary>
        /// Indicates if the message has a payload.
        /// </summary>
        /// <returns>True, if there is a payload.</returns>
        public bool HasPayload => Payload != null;

        /// <summary>
        /// Gets or sets the delivery tag which is used for server side checkpointing.
        /// </summary>
        internal ArraySegment<byte> DeliveryTag { get; set; }

        /// <summary>
        /// Gets the payload as a byte array, serialized and encoded if necessary.
        /// </summary>
        /// <remarks>
        /// If needed, serialization uses Newtonsoft.Json and encoding is UTF8.
        /// </remarks>
        /// <returns>A payload as a byte array.</returns>
        internal byte[] GetPayloadObjectBytes()
        {
            return Payload is byte[] payloadAsByteArray
                ? payloadAsByteArray
                : Encoding.UTF8.GetBytes(JsonConvert.SerializeObject(Payload));
        }

        private T GetSystemProperty<T>(string key)
        {
            return SystemProperties.TryGetValue(key, out object value)
                ? (T)value
                : default;
        }
    }
}
