//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.17.6.0 (NJsonSchema v9.10.46.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// <Note>
//     Code manually changed to replace Uri.EscapeDataString with WebUtility.UrlEncode
//     Newtonsoft.Json dependency upgraded from v9 to v13.
//
//     Consolidated overloads and cleaned up code.
// </Note>

using System;
using System.Text;
using System.Net.Http;
using System.Net.Http.Headers;
using Newtonsoft.Json;
using System.Threading;
using System.Net;
using System.Threading.Tasks;
using System.Linq;
using System.Globalization;
using System.Reflection;
using System.Runtime.Serialization;
using System.ComponentModel;
using System.Runtime.CompilerServices;
using Newtonsoft.Json.Converters;
using System.Collections.Generic;

namespace Microsoft.Azure.Devices.Client.HsmAuthentication.GeneratedCode
{
#pragma warning disable // Disable all warnings

    internal partial class HttpHsmClient
    {
        private readonly HttpClient _httpClient;
        private readonly Lazy<JsonSerializerSettings> _settings;

        internal HttpHsmClient(HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new Lazy<JsonSerializerSettings>(() =>
            {
                var settings = new JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }

        internal string BaseUrl { get; set; } = "http://";

        partial void UpdateJsonSerializerSettings(JsonSerializerSettings settings);

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, string url);
        partial void PrepareRequest(HttpClient client, HttpRequestMessage request, StringBuilder urlBuilder);
        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <param name="apiVersion">The version of the API.</param>
        /// <param name="name">The name of the module on whose behalf the payload will be signed. (urlencoded)</param>
        /// <param name="genid">The generation identifier for the module as generated by IoT hub.</param>
        /// <param name="payload">The data to be signed.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        internal async Task<SignResponse> SignAsync(string apiVersion, string name, string genid, SignRequest payload, CancellationToken cancellationToken = default)
        {
            if (name == null)
                throw new ArgumentNullException("name");

            if (genid == null)
                throw new ArgumentNullException("genid");

            if (apiVersion == null)
                throw new ArgumentNullException("apiVersion");

            var urlBuilder = new StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/modules/{name}/genid/{genid}/sign?");
            urlBuilder.Replace("{name}", WebUtility.UrlEncode(ConvertToString(name, CultureInfo.InvariantCulture)));
            urlBuilder.Replace("{genid}", WebUtility.UrlEncode(ConvertToString(genid, CultureInfo.InvariantCulture)));
            urlBuilder.Append("api-version=").Append(WebUtility.UrlEncode(ConvertToString(apiVersion, CultureInfo.InvariantCulture))).Append("&");
            urlBuilder.Length--;

            using var request = new HttpRequestMessage();
            var content = new StringContent(JsonConvert.SerializeObject(payload, _settings.Value));
            content.Headers.ContentType = MediaTypeHeaderValue.Parse("application/json");
            request.Content = content;
            request.Method = new HttpMethod("POST");
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            PrepareRequest(_httpClient, request, urlBuilder);
            var url = urlBuilder.ToString();
            request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);
            PrepareRequest(_httpClient, request, url);

            using var response = await _httpClient
                .SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                .ConfigureAwait(false);

            var headers = Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
            if (response.Content != null && response.Content.Headers != null)
            {
                foreach (var item in response.Content.Headers)
                    headers[item.Key] = item.Value;
            }

            ProcessResponse(_httpClient, response);

            var status = ((int)response.StatusCode).ToString();
            if (status == "200")
            {
                var responseData = response.Content == null ? null : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                var result = default(SignResponse);
                try
                {
                    result = JsonConvert.DeserializeObject<SignResponse>(responseData, _settings.Value);
                    return result;
                }
                catch (Exception ex)
                {
                    throw new SwaggerException("Could not deserialize the response body.", (int)response.StatusCode, responseData, headers, ex);
                }
            }
            else if (status == "404")
            {
                var responseData = response.Content == null
                    ? null
                    : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                var result = default(ErrorResponse);
                try
                {
                    result = JsonConvert.DeserializeObject<ErrorResponse>(responseData, _settings.Value);
                }
                catch (Exception ex)
                {
                    throw new SwaggerException("Could not deserialize the response body.", (int)response.StatusCode, responseData, headers, ex);
                }
                throw new SwaggerException<ErrorResponse>("Not Found", (int)response.StatusCode, responseData, headers, result, null);
            }
            else
            {
                var responseData = response.Content == null
                    ? null
                    : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                var result = default(ErrorResponse);
                try
                {
                    result = JsonConvert.DeserializeObject<ErrorResponse>(responseData, _settings.Value);
                }
                catch (Exception ex)
                {
                    throw new SwaggerException("Could not deserialize the response body.", (int)response.StatusCode, responseData, headers, ex);
                }
                throw new SwaggerException<ErrorResponse>("Error", (int)response.StatusCode, responseData, headers, result, null);
            }

            return default(SignResponse);
        }

        /// <param name="apiVersion">The version of the API.</param>
        /// <returns>Ok</returns>
        /// <exception cref="SwaggerException">A server side error occurred.</exception>
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        internal async Task<TrustBundleResponse> TrustBundleAsync(string apiVersion, CancellationToken cancellationToken = default)
        {
            if (apiVersion == null)
                throw new ArgumentNullException("apiVersion");

            var urlBuilder = new StringBuilder();
            urlBuilder.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/trust-bundle?");
            urlBuilder.Append("api-version=").Append(WebUtility.UrlEncode(ConvertToString(apiVersion, CultureInfo.InvariantCulture))).Append("&");
            urlBuilder.Length--;

            using var request = new HttpRequestMessage();
            request.Method = new HttpMethod("GET");
            request.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

            PrepareRequest(_httpClient, request, urlBuilder);
            var url = urlBuilder.ToString();
            request.RequestUri = new Uri(url, UriKind.RelativeOrAbsolute);
            PrepareRequest(_httpClient, request, url);

            using var response = await _httpClient.SendAsync(request, HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);

            var headers = Enumerable.ToDictionary(response.Headers, h => h.Key, h => h.Value);
            if (response.Content != null && response.Content.Headers != null)
            {
                foreach (var item in response.Content.Headers)
                    headers[item.Key] = item.Value;
            }

            ProcessResponse(_httpClient, response);

            var status = ((int)response.StatusCode).ToString();
            if (status == "200")
            {
                var responseData = response.Content == null
                    ? null
                    : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                var result = default(TrustBundleResponse);
                try
                {
                    result = JsonConvert.DeserializeObject<TrustBundleResponse>(responseData, _settings.Value);
                    return result;
                }
                catch (Exception ex)
                {
                    throw new SwaggerException("Could not deserialize the response body.", (int)response.StatusCode, responseData, headers, ex);
                }
            }
            else
            {
                var responseData = response.Content == null
                    ? null
                    : await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                var result = default(ErrorResponse);
                try
                {
                    result = JsonConvert.DeserializeObject<ErrorResponse>(responseData, _settings.Value);
                }
                catch (Exception ex)
                {
                    throw new SwaggerException("Could not deserialize the response body.", (int)response.StatusCode, responseData, headers, ex);
                }
                throw new SwaggerException<ErrorResponse>("Error", (int)response.StatusCode, responseData, headers, result, null);
            }

            return default(TrustBundleResponse);
        }

        private string ConvertToString(object value, CultureInfo cultureInfo)
        {
            if (value is Enum)
            {
                string name = Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value;
                        }
                    }
                }
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray)
            {
                var array = Enumerable.OfType<object>((System.Array)value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            return Convert.ToString(value, cultureInfo);
        }
    }

    internal partial class SignRequest : INotifyPropertyChanged
    {
        private string _keyId;
        private SignRequestAlgo _algo;
        private byte[] _data;

        /// <summary>Name of key to perform sign operation.</summary>
        [JsonProperty("keyId", Required = Required.Always)]
        public string KeyId
        {
            get { return _keyId; }
            set
            {
                if (_keyId != value)
                {
                    _keyId = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Sign algorithm to be used.</summary>
        [JsonProperty("algo", Required = Required.Always)]
        [JsonConverter(typeof(StringEnumConverter))]
        public SignRequestAlgo Algo
        {
            get { return _algo; }
            set
            {
                if (_algo != value)
                {
                    _algo = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Data to be signed.</summary>
        [JsonProperty("data", Required = Required.Always)]
        public byte[] Data
        {
            get { return _data; }
            set
            {
                if (_data != value)
                {
                    _data = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static SignRequest FromJson(string data)
        {
            return JsonConvert.DeserializeObject<SignRequest>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class SignResponse : INotifyPropertyChanged
    {
        private byte[] _digest;

        /// <summary>Signature of the data.</summary>
        [JsonProperty("digest", Required = Required.Always)]
        public byte[] Digest
        {
            get { return _digest; }
            set
            {
                if (_digest != value)
                {
                    _digest = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static SignResponse FromJson(string data)
        {
            return JsonConvert.DeserializeObject<SignResponse>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

    }

    internal partial class EncryptRequest : INotifyPropertyChanged
    {
        private byte[] _plaintext;
        private byte[] _initializationVector;

        /// <summary>The data to be encrypted.</summary>
        [JsonProperty("plaintext", Required = Required.Always)]
        public byte[] Plaintext
        {
            get { return _plaintext; }
            set
            {
                if (_plaintext != value)
                {
                    _plaintext = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>An initialization vector used to encrypt the data.</summary>
        [JsonProperty("initializationVector", Required = Required.Always)]
        public byte[] InitializationVector
        {
            get { return _initializationVector; }
            set
            {
                if (_initializationVector != value)
                {
                    _initializationVector = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static EncryptRequest FromJson(string data)
        {
            return JsonConvert.DeserializeObject<EncryptRequest>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }

    }

    internal partial class EncryptResponse : INotifyPropertyChanged
    {
        private byte[] _ciphertext;

        /// <summary>The encrypted form of the data encoded in base 64.</summary>
        [JsonProperty("ciphertext", Required = Required.Always)]
        public byte[] Ciphertext
        {
            get { return _ciphertext; }
            set
            {
                if (_ciphertext != value)
                {
                    _ciphertext = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static EncryptResponse FromJson(string data)
        {
            return JsonConvert.DeserializeObject<EncryptResponse>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class DecryptRequest : INotifyPropertyChanged
    {
        private byte[] _ciphertext;
        private byte[] _initializationVector;

        /// <summary>The data to be decrypted.</summary>
        [JsonProperty("ciphertext", Required = Required.Always)]
        public byte[] Ciphertext
        {
            get { return _ciphertext; }
            set
            {
                if (_ciphertext != value)
                {
                    _ciphertext = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>An initialization vector used to decrypt the data.</summary>
        [JsonProperty("initializationVector", Required = Required.Always)]
        public byte[] InitializationVector
        {
            get { return _initializationVector; }
            set
            {
                if (_initializationVector != value)
                {
                    _initializationVector = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DecryptRequest FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DecryptRequest>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class DecryptResponse : INotifyPropertyChanged
    {
        private byte[] _plaintext;

        /// <summary>The decrypted form of the data encoded in base 64.</summary>
        [JsonProperty("plaintext", Required = Required.Always)]
        public byte[] Plaintext
        {
            get { return _plaintext; }
            set
            {
                if (_plaintext != value)
                {
                    _plaintext = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static DecryptResponse FromJson(string data)
        {
            return JsonConvert.DeserializeObject<DecryptResponse>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class ServerCertificateRequest : INotifyPropertyChanged
    {
        private string _commonName;
        private DateTime _expiration;

        /// <summary>Subject common name</summary>
        [JsonProperty("commonName", Required = Required.Always)]
        public string CommonName
        {
            get { return _commonName; }
            set
            {
                if (_commonName != value)
                {
                    _commonName = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Certificate expiration date-time (ISO 8601)</summary>
        [JsonProperty("expiration", Required = Required.Always)]
        public DateTime Expiration
        {
            get { return _expiration; }
            set
            {
                if (_expiration != value)
                {
                    _expiration = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ServerCertificateRequest FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ServerCertificateRequest>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class CertificateResponse : INotifyPropertyChanged
    {
        private PrivateKey _privateKey = new PrivateKey();
        private string _certificate;
        private System.DateTime _expiration;

        [JsonProperty("privateKey", Required = Required.Always)]
        public PrivateKey PrivateKey
        {
            get { return _privateKey; }
            set
            {
                if (_privateKey != value)
                {
                    _privateKey = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Base64 encoded PEM formatted byte array containing the certificate and its chain.</summary>
        [JsonProperty("certificate", Required = Required.Always)]
        public string Certificate
        {
            get { return _certificate; }
            set
            {
                if (_certificate != value)
                {
                    _certificate = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Certificate expiration date-time (ISO 8601)</summary>
        [JsonProperty("expiration", Required = Required.Always)]
        public DateTime Expiration
        {
            get { return _expiration; }
            set
            {
                if (_expiration != value)
                {
                    _expiration = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static CertificateResponse FromJson(string data)
        {
            return JsonConvert.DeserializeObject<CertificateResponse>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class TrustBundleResponse : INotifyPropertyChanged
    {
        private string _certificate;

        /// <summary>Base64 encoded PEM formatted byte array containing the trusted certificates.</summary>
        [JsonProperty("certificate", Required = Required.Always)]
        public string Certificate
        {
            get { return _certificate; }
            set
            {
                if (_certificate != value)
                {
                    _certificate = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static TrustBundleResponse FromJson(string data)
        {
            return JsonConvert.DeserializeObject<TrustBundleResponse>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class PrivateKey : INotifyPropertyChanged
    {
        private PrivateKeyType _type;
        private string _ref;
        private string _bytes;

        /// <summary>Indicates format of the key (present in PEM formatted bytes or a reference)</summary>
        [JsonProperty("type", Required = Required.Always)]
        [JsonConverter(typeof(StringEnumConverter))]
        public PrivateKeyType Type
        {
            get { return _type; }
            set
            {
                if (_type != value)
                {
                    _type = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Reference to private key.</summary>
        [JsonProperty("ref", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Ref
        {
            get { return _ref; }
            set
            {
                if (_ref != value)
                {
                    _ref = value;
                    RaisePropertyChanged();
                }
            }
        }

        /// <summary>Base64 encoded PEM formatted byte array</summary>
        [JsonProperty("bytes", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
        public string Bytes
        {
            get { return _bytes; }
            set
            {
                if (_bytes != value)
                {
                    _bytes = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static PrivateKey FromJson(string data)
        {
            return JsonConvert.DeserializeObject<PrivateKey>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal partial class ErrorResponse : INotifyPropertyChanged
    {
        private string _message;

        [JsonProperty("message", Required = Required.Always)]
        public string Message
        {
            get { return _message; }
            set
            {
                if (_message != value)
                {
                    _message = value;
                    RaisePropertyChanged();
                }
            }
        }

        public string ToJson()
        {
            return JsonConvert.SerializeObject(this);
        }

        public static ErrorResponse FromJson(string data)
        {
            return JsonConvert.DeserializeObject<ErrorResponse>(data);
        }

        public event PropertyChangedEventHandler PropertyChanged;

        protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
        {
            var handler = PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    internal enum SignRequestAlgo
    {
        [System.Runtime.Serialization.EnumMember(Value = "HMACSHA256")]
        HMACSHA256 = 0,

    }

    internal enum PrivateKeyType
    {
        [EnumMember(Value = "ref")]
        Ref = 0,

        [EnumMember(Value = "key")]
        Key = 1,
    }

    internal partial class SwaggerException : Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public Dictionary<string, IEnumerable<string>> Headers { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, IEnumerable<string>> headers, Exception innerException)
            : base(message, innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    internal partial class SwaggerException<TResult> : SwaggerException
    {
        public TResult Result { get; private set; }

        public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, IEnumerable<string>> headers, TResult result, Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }
}
