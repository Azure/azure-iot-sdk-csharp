// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;

namespace Microsoft.Azure.Devices.Client
{
    /// <summary>
    /// An incoming message sent by a service client to this device or module using cloud-to-device messaging.
    /// </summary>
    /// <seealso href="https://learn.microsoft.com/azure/iot-hub/iot-hub-devguide-messages-c2d"/>
    public class IncomingMessage
    {
        private readonly byte[] _payload;

        /// <summary>
        /// Creates an instance of this class.
        /// </summary>
        /// <remarks>
        /// This class can be inherited from and set by unit tests for mocking purposes.
        /// </remarks>
        /// <param name="payload">The payload to be set to the incoming message.</param>
        protected internal IncomingMessage(byte[] payload)
        {
            _payload = payload;
        }

        /// <summary>
        /// An identifier for the message useful for avoiding reprocessing the same message again.
        /// </summary>
        /// <remarks>
        /// Format: A case-sensitive string (up to 128 char long) of ASCII 7-bit alphanumeric chars
        /// plus these non-alphanumeric characters:
        /// { '-', ':', '/', '\', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', ''' }.
        /// </remarks>
        public string MessageId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.MessageId);
            protected internal set => SystemProperties[MessageSystemPropertyNames.MessageId] = value;
        }

        /// <summary>
        /// A string property of the request useful for tracking specific messages across device
        /// clients, Edge modules, and service clients.
        /// </summary>
        public string CorrelationId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.CorrelationId);
            protected internal set => SystemProperties[MessageSystemPropertyNames.CorrelationId] = value;
        }

        /// <summary>
        /// A number (unique per device-queue) assigned by IoT hub to each cloud-to-device message.
        /// </summary>
        public ulong SequenceNumber
        {
            get => GetSystemProperty<ulong>(MessageSystemPropertyNames.SequenceNumber);
            protected internal set => SystemProperties[MessageSystemPropertyNames.SequenceNumber] = value;
        }

        /// <summary>
        /// A destination specified in the cloud-to-device message.
        /// </summary>
        public string To
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.To);
            protected internal set => SystemProperties[MessageSystemPropertyNames.To] = value;
        }

        /// <summary>
        /// An ID used to specify the origin of messages. When messages are generated by IoT Hub, it is set to {iot hub name}.
        /// </summary>
        public string UserId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.UserId);
            protected internal set => SystemProperties[MessageSystemPropertyNames.UserId] = value;
        }

        /// <summary>
        /// The event creation time when sending one message at a time.
        /// </summary>
        public DateTimeOffset CreatedOnUtc
        {
            get => GetSystemProperty<DateTimeOffset>(MessageSystemPropertyNames.CreationTimeUtc);
            protected internal set => SystemProperties[MessageSystemPropertyNames.CreationTimeUtc] = value;
        }

        /// <summary>
        /// Date and time when the device-to-cloud message was received by the server.
        /// </summary>
        public DateTimeOffset EnqueuedOnUtc
        {
            get => GetSystemProperty<DateTimeOffset>(MessageSystemPropertyNames.EnqueuedTime);
            protected internal set => SystemProperties[MessageSystemPropertyNames.EnqueuedTime] = value;
        }

        /// <summary>
        /// The time when this message is considered expired.
        /// </summary>
        public DateTimeOffset ExpiresOnUtc
        {
            get => GetSystemProperty<DateTimeOffset>(MessageSystemPropertyNames.ExpiryTimeUtc);
            protected internal set => SystemProperties[MessageSystemPropertyNames.ExpiryTimeUtc] = value;
        }

        /// <summary>
        /// Used to specify the schema of the message content.
        /// </summary>
        public string MessageSchema
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.MessageSchema);
            protected internal set => SystemProperties[MessageSystemPropertyNames.MessageSchema] = value;
        }

        /// <summary>
        /// Used to specify the content type of the message.
        /// </summary>
        public string ContentType
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.ContentType);
            protected internal set => SystemProperties[MessageSystemPropertyNames.ContentType] = value;
        }

        /// <summary>
        /// Used to specify the content encoding type of the message.
        /// </summary>
        public string ContentEncoding
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.ContentEncoding);
            protected internal set => SystemProperties[MessageSystemPropertyNames.ContentEncoding] = value;
        }

        /// <summary>
        /// Specifies the input name on which the message was sent, if there was one.
        /// </summary>
        public string InputName
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.InputName);
            protected internal set => SystemProperties[MessageSystemPropertyNames.InputName] = value;
        }

        /// <summary>
        /// Gets the dictionary of user properties which are set when user send the data.
        /// </summary>
        public IDictionary<string, string> Properties { get; private set; } = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// Gets the dictionary of system properties which are managed internally.
        /// </summary>
        protected internal IDictionary<string, object> SystemProperties { get; private set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// The convention to use with this message payload.
        /// </summary>
        protected internal PayloadConvention PayloadConvention { get; set; } = DefaultPayloadConvention.Instance;

        /// <summary>
        /// The message payload, deserialized to the specified type.
        /// </summary>
        /// <typeparam name="T">The type to deserialize <paramref name="payload"/> to.</typeparam>
        /// <param name="payload">When this method returns true, this contains the value of the message payload.
        /// When this method returns false, this contains the default value of the type <c>T</c> passed in.</param>
        /// <returns><c>true</c> if the message payload can be deserialized to type <c>T</c>; otherwise, <c>false</c>.</returns>
        public bool TryGetPayload<T>(out T payload)
        {
            payload = default;

            try
            {
                string payloadString = PayloadConvention.PayloadEncoder.ContentEncoding.GetString(_payload);
                payload = PayloadConvention.PayloadSerializer.DeserializeToType<T>(payloadString);

                return true;
            }
            catch (Exception)
            {
                // In case the value cannot be converted using the serializer,
                // then return false with the default value of the type <T> passed in.
            }

            return false;
        }

        private T GetSystemProperty<T>(string key)
        {
            return SystemProperties.TryGetValue(key, out object value) ? (T)value : default;
        }
    }
}
