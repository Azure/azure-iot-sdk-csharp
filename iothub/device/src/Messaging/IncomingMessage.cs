// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;

namespace Microsoft.Azure.Devices.Client
{
    /// <summary>
    /// The data structure that represents the message that is received from IotHub.
    /// </summary>
    public class IncomingMessage
    {
        private readonly byte[] _payload;

        internal IncomingMessage(byte[] payload)
        {
            _payload = payload;
        }

        /// <summary>
        /// An identifier for the message used for request-reply patterns.
        /// Format: A case-sensitive string ( up to 128 char long) of ASCII 7-bit alphanumeric chars
        /// + {'-', ':', '/', '\', '.', '+', '%', '_', '#', '*', '?', '!', '(', ')', ',', '=', '@', ';', '$', '''}.
        /// Non-alphanumeric characters are from URN RFC.
        /// </summary>
        public string MessageId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.MessageId);
            internal set => SystemProperties[MessageSystemPropertyNames.MessageId] = value;
        }

        /// <summary>
        /// A number (unique per device-queue) assigned by IoT Hub to each cloud-to-device message.
        /// </summary>
        public ulong SequenceNumber
        {
            get => GetSystemProperty<ulong>(MessageSystemPropertyNames.SequenceNumber);
            internal set => SystemProperties[MessageSystemPropertyNames.SequenceNumber] = value;
        }

        /// <summary>
        /// A destination specified in the cloud-to-device message.
        /// </summary>
        public string To
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.To);
            internal set => SystemProperties[MessageSystemPropertyNames.To] = value;
        }

        /// <summary>
        /// Specifies the input name on which the message was sent, if there was one.
        /// </summary>
        public string InputName
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.InputName);
            internal set => SystemProperties[MessageSystemPropertyNames.InputName] = value;
        }

        /// <summary>
        /// Date and time when the device-to-cloud message was received by the server.
        /// </summary>
        public DateTime EnqueuedTimeUtc
        {
            get => GetSystemProperty<DateTime>(MessageSystemPropertyNames.EnqueuedTime);
            internal set => SystemProperties[MessageSystemPropertyNames.EnqueuedTime] = value;
        }

        /// <summary>
        /// The event creation time when sending one message at a time.
        /// </summary>
        public DateTime CreationTimeUtc
        {
            get => GetSystemProperty<DateTime>(MessageSystemPropertyNames.CreationTimeUtc);
            set => SystemProperties[MessageSystemPropertyNames.CreationTimeUtc] = value;
        }

        /// <summary>
        /// The time when this message is considered expired
        /// </summary>
        public DateTime ExpiryTimeUtc
        {
            get => GetSystemProperty<DateTime>(MessageSystemPropertyNames.ExpiryTimeUtc);
            internal set => SystemProperties[MessageSystemPropertyNames.ExpiryTimeUtc] = value;
        }

        /// <summary>
        /// A string property that typically contains the MessageId of the request, in request-reply patterns.
        /// </summary>
        public string CorrelationId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.CorrelationId);
            internal set => SystemProperties[MessageSystemPropertyNames.CorrelationId] = value;
        }

        /// <summary>
        /// An ID used to specify the origin of messages. When messages are generated by IoT Hub, it is set to {iot hub name}.
        /// </summary>
        public string UserId
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.UserId);
            internal set => SystemProperties[MessageSystemPropertyNames.UserId] = value;
        }

        /// <summary>
        /// Number of times the message has been previously delivered
        /// </summary>
        public uint DeliveryCount
        {
            get => GetSystemProperty<byte>(MessageSystemPropertyNames.DeliveryCount);
            internal set => SystemProperties[MessageSystemPropertyNames.DeliveryCount] = (byte)value;
        }

        /// <summary>
        /// This property is used in cloud-to-device messages to request IoT Hub to generate feedback messages as a result of the consumption of the message by the device.
        /// </summary>
        /// <remarks>
        /// Possible values:
        /// <list type="bullet">
        /// <item>none (default): no feedback message is generated.</item>
        /// <item>positive: receive a feedback message if the message was completed.</item>
        /// <item>negative: receive a feedback message if the message expired (or maximum delivery count was reached) without being completed by the device.</item>
        /// <item>full: both positive and negative.</item>
        /// </list>
        /// </remarks>
        public string Acknowledgement
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.Ack);
            internal set => SystemProperties[MessageSystemPropertyNames.Ack] = value;
        }

        /// <summary>
        /// Used to specify the schema of the message content.
        /// </summary>
        public string MessageSchema
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.MessageSchema);
            internal set => SystemProperties[MessageSystemPropertyNames.MessageSchema] = value;
        }

        /// <summary>
        /// Used to specify the content type of the message.
        /// </summary>
        public string ContentType
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.ContentType);
            internal set => SystemProperties[MessageSystemPropertyNames.ContentType] = value;
        }

        /// <summary>
        /// Used to specify the content encoding type of the message.
        /// </summary>
        public string ContentEncoding
        {
            get => GetSystemProperty<string>(MessageSystemPropertyNames.ContentEncoding);
            internal set => SystemProperties[MessageSystemPropertyNames.ContentEncoding] = value;
        }

        /// <summary>
        /// Gets the dictionary of user properties which are set when user send the data.
        /// </summary>
        public IDictionary<string, string> Properties { get; private set; } = new Dictionary<string, string>(StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// Gets the dictionary of system properties which are managed internally.
        /// </summary>
        internal IDictionary<string, object> SystemProperties { get; private set; } = new Dictionary<string, object>(StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// The convention to use with this message payload.
        /// </summary>
        internal PayloadConvention PayloadConvention { get; set; }

        /// <summary>
        /// The message payload, deserialized to the specified type.
        /// </summary>
        /// <typeparam name="T">The type to deserialize <paramref name="payload"/> to.</typeparam>
        /// <param name="payload">When this method returns true, this contains the value of the message payload.
        /// When this method returns false, this contains the default value of the type <c>T</c> passed in.</param>
        /// <returns><c>true</c> if the message payload can be deserialized to type <c>T</c>; otherwise, <c>false</c>.</returns>
        public bool TryGetPayload<T>(out T payload)
        {
            payload = default;

            try
            {
                string payloadString = PayloadConvention.PayloadEncoder.ContentEncoding.GetString(_payload);
                payload = PayloadConvention.PayloadSerializer.DeserializeToType<T>(payloadString);
                return true;
            }
            catch (Exception)
            {
                // In case the value cannot be converted using the serializer,
                // then return false with the default value of the type <T> passed in.
            }

            return false;
        }

        private T GetSystemProperty<T>(string key)
        {
            return SystemProperties.ContainsKey(key)
                ? (T)SystemProperties[key]
                : default;
        }
    }
}
