// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

namespace Microsoft.Azure.Devices.Client.Test
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Threading;
    using System.Threading.Tasks;
    using DotNetty.Common.Concurrency;
    using Microsoft.Azure.Devices.Client.Transport;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using NSubstitute;

    [TestClass]
    [TestCategory("Unit")]
    public class RetryDelegatingHandlerImplicitOpenTests
    {
        [TestMethod]
        public async Task OpenAsyncInnerCompletedSubjIsOpen()
        {
            var contextMock = Substitute.For<IPipelineContext>();
            var innerHandlerMock = Substitute.For<IDelegatingHandler>();
            innerHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);

            var cancellationToken = new CancellationToken();
            var sut = new RetryDelegatingHandler(contextMock, innerHandlerMock);
            await sut.OpenAsync(cancellationToken).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task ImplicitOpenSubjWasNotOpenSubjIsOpen()
        {
            var contextMock = Substitute.For<IPipelineContext>();
            var innerHandlerMock = Substitute.For<IDelegatingHandler>();
            innerHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);
            innerHandlerMock.SendEventAsync(Arg.Any<Message>(), Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);
            innerHandlerMock.SendEventAsync(Arg.Any<IEnumerable<Message>>(), Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);
            innerHandlerMock.ReceiveAsync(Arg.Any<CancellationToken>()).Returns(t => Task.FromResult(new Message()));
            innerHandlerMock.ReceiveAsync(Arg.Any<CancellationToken>()).Returns(t => Task.FromResult(new Message()));
            innerHandlerMock.AbandonAsync(Arg.Any<string>(), Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);
            innerHandlerMock.CompleteAsync(Arg.Any<string>(), Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);
            innerHandlerMock.RejectAsync(Arg.Any<string>(), Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);
            innerHandlerMock.WaitForTransportClosedAsync().Returns(Task.Delay(TimeSpan.FromSeconds(10)));
            var cancellationToken = new CancellationToken();
            var actions = new Func<IDelegatingHandler, Task>[]
            {
                sut => sut.SendEventAsync(new Message(), cancellationToken),
                sut => sut.SendEventAsync(new[] { new Message() }, cancellationToken),
                sut => sut.ReceiveAsync(cancellationToken),
                sut => sut.AbandonAsync(string.Empty, cancellationToken),
                sut => sut.CompleteAsync(string.Empty, cancellationToken),
                sut => sut.RejectAsync(string.Empty, cancellationToken),
            };

            foreach (Func<IDelegatingHandler, Task> action in actions)
            {
                var sut = new RetryDelegatingHandler(contextMock, innerHandlerMock);
                await action(sut).ConfigureAwait(false);
            }

            await innerHandlerMock.Received(actions.Length).OpenAsync(Arg.Any<CancellationToken>()).ConfigureAwait(false);

            var testee = new RetryDelegatingHandler(contextMock, innerHandlerMock);
            await testee.ReceiveAsync(new TimeoutHelper(TimeSpan.FromSeconds(1))).ConfigureAwait(false);
            await innerHandlerMock.Received().OpenAsync(Arg.Any<TimeoutHelper>()).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task Retry_CloseAsyncBeforeOpen_Ok()
        {
            var contextMock = Substitute.For<IPipelineContext>();
            var innerHandlerMock = Substitute.For<IDelegatingHandler>();
            innerHandlerMock.CloseAsync(CancellationToken.None).Returns(t => TaskHelpers.CompletedTask);

            var sut = new RetryDelegatingHandler(contextMock, innerHandlerMock);
            await sut.CloseAsync(CancellationToken.None).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task Retry_CloseAsyncSuccessDisposesHandler_Throws()
        {
            var contextMock = Substitute.For<IPipelineContext>();
            var innerHandlerMock = Substitute.For<IDelegatingHandler>();
            var cancellationToken = new CancellationToken();

            innerHandlerMock.OpenAsync(cancellationToken).Returns(t => TaskHelpers.CompletedTask);
            innerHandlerMock.CloseAsync(cancellationToken).Returns(t => TaskHelpers.CompletedTask);

            var sut = new RetryDelegatingHandler(contextMock, innerHandlerMock);
            await sut.OpenAsync(cancellationToken).ConfigureAwait(false);
            await sut.CloseAsync(cancellationToken).ConfigureAwait(false);

            await ((Func<Task>)(() => sut.OpenAsync(cancellationToken))).ExpectedAsync<ObjectDisposedException>().ConfigureAwait(false);
        }

        [TestMethod]
        public async Task OpenAsyncTwoCallersOnlyOneOpenCalled()
        {
            var contextMock = Substitute.For<IPipelineContext>();
            var tcs = new TaskCompletionSource<int>();
            var innerHandlerMock = Substitute.For<IDelegatingHandler>();
            int callCounter = 0;
            innerHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(t =>
            {
                callCounter++;
                return tcs.Task;
            });
            innerHandlerMock.WaitForTransportClosedAsync().Returns(Task.Delay(TimeSpan.FromSeconds(10)));

            var sut = new RetryDelegatingHandler(contextMock, innerHandlerMock);
            var cancellationToken = new CancellationToken();
            Task firstOpen = sut.OpenAsync(cancellationToken);
            Task secondOpen = sut.OpenAsync(cancellationToken);
            tcs.SetResult(0);
            await Task.WhenAll(firstOpen, secondOpen).ConfigureAwait(false);

            Assert.AreEqual(1, callCounter);
        }

        [TestMethod]
        public async Task OpenAsyncInnerFailedSutIsOpenAndCanBeReopen()
        {
            var contextMock = Substitute.For<IPipelineContext>();
            var innerHandlerMock = Substitute.For<IDelegatingHandler>();
            bool shouldThrow = true;

            innerHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(ci =>
            {
                if (shouldThrow)
                {
                    throw new IOException();
                }
                else
                {
                    return TaskHelpers.CompletedTask; ;
                }
            });

            var sut = new RetryDelegatingHandler(contextMock, innerHandlerMock);
            var cancellationToken = new CancellationToken();
            await sut.OpenAsync(cancellationToken).ExpectedAsync<IOException>().ConfigureAwait(false);

            shouldThrow = false;

            await sut.OpenAsync(cancellationToken).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task OpenAsyncInnerCancelledSutIsOpenAndCanBeReopen()
        {
            var contextMock = Substitute.For<IPipelineContext>();
            var tcs = new TaskCompletionSource<int>();
            tcs.SetCanceled();
            var innerHandlerMock = Substitute.For<IDelegatingHandler>();
            innerHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(tcs.Task);

            var sut = new RetryDelegatingHandler(contextMock, innerHandlerMock);
            var cancellationToken = new CancellationToken();
            await sut.OpenAsync(cancellationToken).ExpectedAsync<TaskCanceledException>().ConfigureAwait(false);

            innerHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(t => TaskHelpers.CompletedTask);

            await sut.OpenAsync(cancellationToken).ConfigureAwait(false);
        }
    }
}
