// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Azure.Devices.Client.Transport;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;

namespace Microsoft.Azure.Devices.Client.Tests
{
    [TestClass]
    [TestCategory("Unit")]
    public class RetryDelegatingHandlerImplicitOpenTests
    {
        [TestMethod]
        public async Task RetryDelegatingHandlerImplicitOpen_OpenAsyncNextCompletedSubjIsOpen()
        {
            var contextMock = new PipelineContext
            {
                RetryPolicy = new IotHubClientTestRetryPolicy(1),
                ConnectionStatusChangeHandler = (connectionStatusInfo) => { }
            };
            var nextHandlerMock = new Mock<IDelegatingHandler>();
            nextHandlerMock.Setup(x => x.OpenAsync(It.IsAny<CancellationToken>())).Returns(() => Task.CompletedTask);

            using var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock.Object);
            await sut.OpenAsync(CancellationToken.None).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task RetryDelegatingHandlerImplicitOpen_NoImplicitOpenByClientMethods()
        {
            var contextMock = new PipelineContext
            {
                RetryPolicy = new IotHubClientTestRetryPolicy(2),
                ConnectionStatusChangeHandler = (connectionStatusInfo) => { }
            };
            var nextHandlerMock = new Mock<IDelegatingHandler>();
            nextHandlerMock.Setup(x => x.OpenAsync(It.IsAny<CancellationToken>())).Returns(() => Task.CompletedTask);
            nextHandlerMock.Setup(x => x.SendTelemetryAsync(It.IsAny<TelemetryMessage>(), It.IsAny<CancellationToken>())).Returns(() => Task.CompletedTask);
            nextHandlerMock.Setup(x => x.SendTelemetryAsync(It.IsAny<IEnumerable<TelemetryMessage>>(), It.IsAny<CancellationToken>())).Returns(() => Task.CompletedTask);
            nextHandlerMock.Setup(x => x.WaitForTransportClosedAsync()).Returns(() => Task.Delay(TimeSpan.FromSeconds(10)));
            var actions = new Func<IDelegatingHandler, Task>[]
            {
                sut => sut.SendTelemetryAsync(new TelemetryMessage(), CancellationToken.None),
                sut => sut.SendTelemetryAsync(new[] { new TelemetryMessage() }, CancellationToken.None),
            };

            foreach (Func<IDelegatingHandler, Task> action in actions)
            {
                using var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock.Object);
                await sut.OpenAsync(CancellationToken.None).ConfigureAwait(false);
                await action(sut).ConfigureAwait(false);
            }

            nextHandlerMock.Verify(x => x.OpenAsync(It.IsAny<CancellationToken>()), Times.Exactly(actions.Length));
        }
    }
}
