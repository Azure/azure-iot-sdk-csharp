// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using FluentAssertions;
using Microsoft.Azure.Devices.Client.Transport;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using NSubstitute;

namespace Microsoft.Azure.Devices.Client.Test
{
    [TestClass]
    [TestCategory("Unit")]
    public class RetryDelegatingHandlerImplicitOpenTests
    {
        [TestMethod]
        public async Task OpenAsyncNextCompletedSubjIsOpen()
        {
            var contextMock = Substitute.For<PipelineContext>();
            contextMock.ConnectionStatusChangeHandler = (connectionStatusInfo) => { };
            var nextHandlerMock = Substitute.For<IDelegatingHandler>();
            nextHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(t => Task.CompletedTask);

            var cancellationToken = new CancellationToken();
            var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock);
            await sut.OpenAsync(cancellationToken).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task ImplicitOpenSubjWasNotOpenSubjIsOpen()
        {
            var contextMock = Substitute.For<PipelineContext>();
            contextMock.ConnectionStatusChangeHandler = (connectionStatusInfo) => { };
            var nextHandlerMock = Substitute.For<IDelegatingHandler>();
            nextHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(t => Task.CompletedTask);
            nextHandlerMock.SendTelemetryAsync(Arg.Any<TelemetryMessage>(), Arg.Any<CancellationToken>()).Returns(t => Task.CompletedTask);
            nextHandlerMock.SendTelemetryBatchAsync(Arg.Any<IEnumerable<TelemetryMessage>>(), Arg.Any<CancellationToken>()).Returns(t => Task.CompletedTask);
            nextHandlerMock.WaitForTransportClosedAsync().Returns(Task.Delay(TimeSpan.FromSeconds(10)));
            var cancellationToken = new CancellationToken();
            var actions = new Func<IDelegatingHandler, Task>[]
            {
                sut => sut.SendTelemetryAsync(new TelemetryMessage(), cancellationToken),
                sut => sut.SendTelemetryBatchAsync(new[] { new TelemetryMessage() }, cancellationToken),
            };

            foreach (Func<IDelegatingHandler, Task> action in actions)
            {
                var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock);
                await sut.OpenAsync(cancellationToken).ConfigureAwait(false);
                await action(sut).ConfigureAwait(false);
            }

            await nextHandlerMock.Received(actions.Length).OpenAsync(Arg.Any<CancellationToken>()).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task Retry_CloseAsyncBeforeOpen_Ok()
        {
            var contextMock = Substitute.For<PipelineContext>();
            var nextHandlerMock = Substitute.For<IDelegatingHandler>();
            nextHandlerMock.CloseAsync(CancellationToken.None).Returns(t => Task.CompletedTask);

            var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock);
            await sut.CloseAsync(CancellationToken.None).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task OpenAsync_SynchronizesToOneInnerCallToOpen()
        {
            var contextMock = new PipelineContext();
            contextMock.ConnectionStatusChangeHandler = (csi) => { }; // avoid NRE

            int callCounter = 0;
            var nextHandlerMock = new Mock<IDelegatingHandler>();
            nextHandlerMock
                .Setup(x => x.OpenAsync(CancellationToken.None))
                .Returns(() =>
                    {
                        callCounter++;
                        return Task.CompletedTask;
                    });

            var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock.Object);

            // Simutaneously run two calls to open
            await Task
                .WhenAll(
                    sut.OpenAsync(CancellationToken.None),
                    sut.OpenAsync(CancellationToken.None))
                .ConfigureAwait(false);

            callCounter.Should().Be(1);
        }

        [TestMethod]
        public async Task OpenAsyncNextFailedSutIsOpenAndCanBeReopen()
        {
            var contextMock = Substitute.For<PipelineContext>();
            contextMock.ConnectionStatusChangeHandler = (connectionStatusInfo) => { };
            var nextHandlerMock = Substitute.For<IDelegatingHandler>();
            bool shouldThrow = true;

            nextHandlerMock.OpenAsync(Arg.Any<CancellationToken>()).Returns(ci =>
            {
                if (shouldThrow)
                {
                    throw new IOException();
                }
                else
                {
                    return Task.CompletedTask;
                }
            });

            var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock);
            var cancellationToken = new CancellationToken();
            await sut.OpenAsync(cancellationToken).ExpectedAsync<IOException>().ConfigureAwait(false);

            shouldThrow = false;

            await sut.OpenAsync(cancellationToken).ConfigureAwait(false);
        }

        [TestMethod]
        public async Task OpenAsync_AfterCancelled_CanBeReopened()
        {
            // arrange

            var contextMock = new PipelineContext();
            contextMock.ConnectionStatusChangeHandler = (csi) => { }; // avoid NRE

            var nextHandlerMock = new Mock<IDelegatingHandler>();
            nextHandlerMock
                .Setup(x => x.OpenAsync(CancellationToken.None))
                .Returns(() => throw new TaskCanceledException());

            var sut = new RetryDelegatingHandler(contextMock, nextHandlerMock.Object);

            // act and assert
            Func<Task> actual = () => sut.OpenAsync(CancellationToken.None);
            await actual
                .Should()
                .ThrowAsync<TaskCanceledException>();

            // arrange again

            nextHandlerMock
                .Setup(x => x.OpenAsync(CancellationToken.None))
                .Returns(() => Task.CompletedTask);

            // act and assert again
            actual = () => sut.OpenAsync(CancellationToken.None);
            await actual
                .Should()
                .NotThrowAsync();
        }
    }
}
