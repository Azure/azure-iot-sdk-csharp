/*
 * IoT SDK Device & Client REST API
 *
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class WrapperApiController : Controller
    {
        internal WrapperGlue wrapper_glue = new WrapperGlue();

        /// <summary>
        /// verify that the clients have cleaned themselves up completely
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/wrapper/cleanup")]
        [ValidateModelState]
        [SwaggerOperation("WrapperCleanupPut")]
        public virtual IActionResult WrapperCleanupPut()
        {
            wrapper_glue.CleanupResourcesAsync().Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// gets configuration details on the current wrapper configuration
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/wrapper/configuration")]
        [ValidateModelState]
        [SwaggerOperation("WrapperConfigurationGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult WrapperConfigurationGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));

            string exampleJson = null;
            exampleJson = "\"{}\"";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// log a message to output
        /// </summary>
        
        /// <param name="msg"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/wrapper/message")]
        [ValidateModelState]
        [SwaggerOperation("WrapperMessagePut")]
        public virtual IActionResult WrapperMessagePut([FromBody]Object msg)
        {
            wrapper_glue.PrintMessageAsync(msg.ToString()).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// Terminate a wrapper, optionally returning the log
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/wrapper/session")]
        [ValidateModelState]
        [SwaggerOperation("WrapperSessionGet")]
        public virtual IActionResult WrapperSessionGet()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Launch a wrapper, getting ready to test
        /// </summary>
        
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/wrapper/session")]
        [ValidateModelState]
        [SwaggerOperation("WrapperSessionPut")]
        public virtual IActionResult WrapperSessionPut()
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }
    }
}
