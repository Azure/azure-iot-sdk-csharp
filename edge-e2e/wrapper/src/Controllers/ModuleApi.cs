/*
 * IoT SDK Device & Client REST API
 *
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class ModuleApiController : Controller
    {
        static internal ModuleGlue module_glue = new ModuleGlue();

        /// <summary>
        /// Connect to the azure IoT Hub as a module using the environment variables
        /// </summary>
        
        /// <param name="transportType">Transport to use</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/connectFromEnvironment/{transportType}")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectFromEnvironmentTransportTypePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConnectResponse), description: "OK")]
        public virtual IActionResult ModuleConnectFromEnvironmentTransportTypePut([FromRoute][Required]string transportType)
        {
            Task<ConnectResponse> t = module_glue.ConnectFromEnvironmentAsync(transportType);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Connect to the azure IoT Hub as a module
        /// </summary>

        /// <param name="transportType">Transport to use</param>
        /// <param name="connectionString">connection string</param>
        /// <param name="caCertificate"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/connect/{transportType}")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectTransportTypePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConnectResponse), description: "OK")]
        public virtual IActionResult ModuleConnectTransportTypePut([FromRoute][Required]string transportType, [FromQuery][Required()]string connectionString, [FromBody]Certificate caCertificate)
        {
            Task<ConnectResponse> t = module_glue.ConnectAsync(transportType, connectionString, caCertificate);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// call the given method on the given device
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <param name="deviceId"></param>
        /// <param name="methodInvokeParameters"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/deviceMethod/{deviceId}")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdDeviceMethodDeviceIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult ModuleConnectionIdDeviceMethodDeviceIdPut([FromRoute][Required]string connectionId, [FromRoute][Required]string deviceId, [FromBody]Object methodInvokeParameters)
        {
            Task<Object> t = module_glue.InvokeDeviceMethodAsync(connectionId, deviceId, methodInvokeParameters);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Disconnect the module
        /// </summary>
        /// <remarks>Disconnects from Azure IoTHub service.  More specifically, closes all connections and cleans up all resources for the active connection</remarks>
        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/disconnect")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdDisconnectPut")]
        public virtual IActionResult ModuleConnectionIdDisconnectPut([FromRoute][Required]string connectionId)
        {
            module_glue.DisconnectAsync(connectionId).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// Enable input messages
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/enableInputMessages")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdEnableInputMessagesPut")]
        public virtual IActionResult ModuleConnectionIdEnableInputMessagesPut([FromRoute][Required]string connectionId)
        {
            module_glue.EnableInputMessagesAsync(connectionId).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// Enable methods
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/enableMethods")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdEnableMethodsPut")]
        public virtual IActionResult ModuleConnectionIdEnableMethodsPut([FromRoute][Required]string connectionId)
        {
            module_glue.EnableMethodsAsync(connectionId).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// Enable module twins
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/enableTwin")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdEnableTwinPut")]
        public virtual IActionResult ModuleConnectionIdEnableTwinPut([FromRoute][Required]string connectionId)
        {
            module_glue.EnableTwinAsync(connectionId).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// Send an event
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <param name="eventBody"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/event")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdEventPut")]
        public virtual IActionResult ModuleConnectionIdEventPut([FromRoute][Required]string connectionId, [FromBody]string eventBody)
        {
            module_glue.SendEventAsync(connectionId, eventBody).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// Wait for a message on a module input
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <param name="inputName"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/module/{connectionId}/inputMessage/{inputName}")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdInputMessageInputNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(string), description: "OK")]
        public virtual IActionResult ModuleConnectionIdInputMessageInputNameGet([FromRoute][Required]string connectionId, [FromRoute][Required]string inputName)
        {
            Task<object> t = module_glue.WaitForInputMessageAsync(connectionId, inputName);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// call the given method on the given module
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <param name="deviceId"></param>
        /// <param name="moduleId"></param>
        /// <param name="methodInvokeParameters"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/moduleMethod/{deviceId}/{moduleId}")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdModuleMethodDeviceIdModuleIdPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult ModuleConnectionIdModuleMethodDeviceIdModuleIdPut([FromRoute][Required]string connectionId, [FromRoute][Required]string deviceId, [FromRoute][Required]string moduleId, [FromBody]Object methodInvokeParameters)
        {
            Task<object> t = module_glue.InvokeModuleMethodAsync(connectionId, deviceId, moduleId, methodInvokeParameters);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Send an event to a module output
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <param name="outputName"></param>
        /// <param name="eventBody"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/outputEvent/{outputName}")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdOutputEventOutputNamePut")]
        public virtual IActionResult ModuleConnectionIdOutputEventOutputNamePut([FromRoute][Required]string connectionId, [FromRoute][Required]string outputName, [FromBody]string eventBody)
        {
            module_glue.SendOutputEventAsync(connectionId, outputName, eventBody).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// Wait for a method call, verify the request, and return the response.
        /// </summary>
        /// <remarks>This is a workaround to deal with SDKs that only have method call operations that are sync.  This function responds to the method with the payload of this function, and then returns the method parameters.  Real-world implemenatations would never do this, but this is the only same way to write our test code right now (because the method handlers for C, Java, and probably Python all return the method response instead of supporting an async method call)</remarks>
        /// <param name="connectionId">Id for the connection</param>
        /// <param name="methodName">name of the method to handle</param>
        /// <param name="requestAndResponse"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/module/{connectionId}/roundtripMethodCall/{methodName}")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdRoundtripMethodCallMethodNamePut")]
        public virtual IActionResult ModuleConnectionIdRoundtripMethodCallMethodNamePut([FromRoute][Required]string connectionId, [FromRoute][Required]string methodName, [FromBody]RoundtripMethodCallBody requestAndResponse)
        {
            Task<object> t = module_glue.RoundtripMethodCallAsync(connectionId, methodName, requestAndResponse); 
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Wait for the next desired property patch
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/module/{connectionId}/twinDesiredPropPatch")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdTwinDesiredPropPatchGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult ModuleConnectionIdTwinDesiredPropPatchGet([FromRoute][Required]string connectionId)
        {
            Task<object> t = module_glue.WaitForDesiredPropertyPatchAsync(connectionId);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Get the device twin
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/module/{connectionId}/twin")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdTwinGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult ModuleConnectionIdTwinGet([FromRoute][Required]string connectionId)
        {
            Task<object> t = module_glue.GetTwinAsync(connectionId);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Updates the device twin
        /// </summary>

        /// <param name="connectionId">Id for the connection</param>
        /// <param name="props"></param>
        /// <response code="200">OK</response>
        [HttpPatch]
        [Route("/module/{connectionId}/twin")]
        [ValidateModelState]
        [SwaggerOperation("ModuleConnectionIdTwinPatch")]
        public virtual IActionResult ModuleConnectionIdTwinPatch([FromRoute][Required]string connectionId, [FromBody]Object props)
        {
            module_glue.SendTwinPatchAsync(connectionId, props).Wait();
            return StatusCode(200);
        }
    }
}
