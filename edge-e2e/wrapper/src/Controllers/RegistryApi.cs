/*
 * IoT SDK Device & Client REST API
 *
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class RegistryApiController : Controller
    {
        static internal RegistryGlue registry_glue = new RegistryGlue();

        /// <summary>
        /// Connect to registry
        /// </summary>
        /// <remarks>Connect to the Azure IoTHub registry.  More specifically, the SDK saves the connection string that is passed in for future use.</remarks>
        /// <param name="connectionString">Service connection string</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/registry/connect")]
        [ValidateModelState]
        [SwaggerOperation("RegistryConnectPut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConnectResponse), description: "OK")]
        public virtual IActionResult RegistryConnectPut([FromQuery][Required()]string connectionString)
        {
            Task<ConnectResponse> t = registry_glue.ConnectAsync(connectionString);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// Disconnect from the registry
        /// </summary>
        /// <remarks>Disconnects from the Azure IoTHub registry.  More specifically, closes all connections and cleans up all resources for the active connection</remarks>
        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/registry/{connectionId}/disconnect/")]
        [ValidateModelState]
        [SwaggerOperation("RegistryConnectionIdDisconnectPut")]
        public virtual IActionResult RegistryConnectionIdDisconnectPut([FromRoute][Required]string connectionId)
        {
            registry_glue.DisconnectAsync(connectionId).Wait();
            return StatusCode(200);
        }

        /// <summary>
        /// gets the module twin for the given deviceid and moduleid
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <param name="deviceId"></param>
        /// <param name="moduleId"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/registry/{connectionId}/moduleTwin/{deviceId}/{moduleId}")]
        [ValidateModelState]
        [SwaggerOperation("RegistryConnectionIdModuleTwinDeviceIdModuleIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "OK")]
        public virtual IActionResult RegistryConnectionIdModuleTwinDeviceIdModuleIdGet([FromRoute][Required]string connectionId, [FromRoute][Required]string deviceId, [FromRoute][Required]string moduleId)
        {
            Task<object> t = registry_glue.GetModuleTwin(connectionId, deviceId, moduleId);
            t.Wait();
            return new ObjectResult(t.Result);
        }

        /// <summary>
        /// update the module twin for the given deviceId and moduleId
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <param name="deviceId"></param>
        /// <param name="moduleId"></param>
        /// <param name="props"></param>
        /// <response code="200">OK</response>
        [HttpPatch]
        [Route("/registry/{connectionId}/moduleTwin/{deviceId}/{moduleId}")]
        [ValidateModelState]
        [SwaggerOperation("RegistryConnectionIdModuleTwinDeviceIdModuleIdPatch")]
        public virtual IActionResult RegistryConnectionIdModuleTwinDeviceIdModuleIdPatch([FromRoute][Required]string connectionId, [FromRoute][Required]string deviceId, [FromRoute][Required]string moduleId, [FromBody]Object props)
        {
            registry_glue.PatchModuleTwin(connectionId, deviceId, moduleId, props).Wait();
            return StatusCode(200);
        }
    }
}
