/*
 * IoT SDK Device & Client REST API
 *
 * REST API definition for End-to-end testing of the Azure IoT SDKs.  All SDK APIs that are tested by our E2E tests need to be defined in this file.  This file takes some liberties with the API definitions.  In particular, response schemas are undefined, and error responses are also undefined.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Primitives;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    public class DeviceApiController : Controller
    { 
        /// <summary>
        /// Connect to the azure IoT Hub as a device
        /// </summary>
        
        /// <param name="transportType">Transport to use</param>
        /// <param name="connectionString">connection string</param>
        /// <param name="caCertificate"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/device/connect/{transportType}")]
        [ValidateModelState]
        [SwaggerOperation("DeviceConnectTransportTypePut")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConnectResponse), description: "OK")]
        public virtual IActionResult DeviceConnectTransportTypePut([FromRoute][Required]string transportType, [FromQuery][Required()]string connectionString, [FromBody]Certificate caCertificate)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConnectResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"connectionId\" : \"connectionId\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConnectResponse>(exampleJson)
            : default(ConnectResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Disconnect the device
        /// </summary>
        /// <remarks>Disconnects from Azure IoTHub service.  More specifically, closes all connections and cleans up all resources for the active connection</remarks>
        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/device/{connectionId}/disconnect")]
        [ValidateModelState]
        [SwaggerOperation("DeviceConnectionIdDisconnectPut")]
        public virtual IActionResult DeviceConnectionIdDisconnectPut([FromRoute][Required]string connectionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Enable methods
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/device/{connectionId}/enableMethods")]
        [ValidateModelState]
        [SwaggerOperation("DeviceConnectionIdEnableMethodsPut")]
        public virtual IActionResult DeviceConnectionIdEnableMethodsPut([FromRoute][Required]string connectionId)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }

        /// <summary>
        /// Wait for a method call with the given name
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <param name="methodName"></param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/device/{connectionId}/methodRequest/{methodName}")]
        [ValidateModelState]
        [SwaggerOperation("DeviceConnectionIdMethodRequestMethodNameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(MethodRequestResponse), description: "OK")]
        public virtual IActionResult DeviceConnectionIdMethodRequestMethodNameGet([FromRoute][Required]string connectionId, [FromRoute][Required]string methodName)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MethodRequestResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"requestPayload\" : \"{}\",\n  \"responseId\" : \"responseId\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MethodRequestResponse>(exampleJson)
            : default(MethodRequestResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Respond to the method call with the given name
        /// </summary>
        
        /// <param name="connectionId">Id for the connection</param>
        /// <param name="responseId"></param>
        /// <param name="statusCode"></param>
        /// <param name="responseBody"></param>
        /// <response code="200">OK</response>
        [HttpPut]
        [Route("/device/{connectionId}/methodResponse/{responseId}/{statusCode}")]
        [ValidateModelState]
        [SwaggerOperation("DeviceConnectionIdMethodResponseResponseIdStatusCodePut")]
        public virtual IActionResult DeviceConnectionIdMethodResponseResponseIdStatusCodePut([FromRoute][Required]string connectionId, [FromRoute][Required]string responseId, [FromRoute][Required]string statusCode, [FromBody]Object responseBody)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);


            throw new NotImplementedException();
        }
    }
}
